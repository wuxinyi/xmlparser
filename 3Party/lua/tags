!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL	Makefile	/^ALL= all$/;"	m
ALLONES	lbitlib.c	33;"	d
ALL_A	Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	Makefile	/^ALL_O= $(BASE_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T)$/;"	m
ALPHABIT	lctype.h	39;"	d
AR	Makefile	/^AR= ar rcu$/;"	m
AUXMARK	loadlib.c	670;"	d
BASE_O	Makefile	/^BASE_O= $(CORE_O) $(LIB_O) $(MYOBJS)$/;"	m
BASIC_STACK_SIZE	lstate.h	41;"	d
BITRK	lopcodes.h	134;"	d
BIT_ISCOLLECTABLE	lobject.h	63;"	d
BLACKBIT	lgc.h	80;"	d
BinOpr	lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	lparser.c	/^typedef struct BlockCnt {$/;"	s
BlockCnt	lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt
CAP_POSITION	lstrlib.c	207;"	d
CAP_UNFINISHED	lstrlib.c	206;"	d
CC	Makefile	/^CC= gcc -std=gnu99$/;"	m
CClosure	lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CFLAGS	Makefile	/^CFLAGS= -O2 -Wall -Wextra -DLUA_COMPAT_5_2 $(SYSCFLAGS) $(MYCFLAGS)$/;"	m
CIST_HOOKED	lstate.h	91;"	d
CIST_HOOKYIELD	lstate.h	96;"	d
CIST_LEQ	lstate.h	97;"	d
CIST_LUA	lstate.h	90;"	d
CIST_OAH	lstate.h	89;"	d
CIST_REENTRY	lstate.h	92;"	d
CIST_TAIL	lstate.h	95;"	d
CIST_YPCALL	lstate.h	94;"	d
CLIBS	loadlib.c	/^static const int CLIBS = 0;$/;"	v
CORE_O	Makefile	/^CORE_O=	lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o \\$/;"	m
CREATE_ABC	lopcodes.h	116;"	d
CREATE_ABx	lopcodes.h	121;"	d
CREATE_Ax	lopcodes.h	125;"	d
CallInfo	lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	lapi.c	/^struct CallS {  \/* data to 'f_call' *\/$/;"	s
Closure	lobject.h	/^typedef union Closure {$/;"	u
Closure	lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	lobject.h	447;"	d
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:GCObject
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:TString
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:Udata
CommonHeader	lobject.h	79;"	d
CommonHeader	lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
ConsControl	lparser.c	/^struct ConsControl {$/;"	s
DIGITBIT	lctype.h	40;"	d
DLMSG	loadlib.c	250;"	d
DumpBlock	ldump.c	/^static void DumpBlock (const void *b, size_t size, DumpState *D) {$/;"	f
DumpByte	ldump.c	/^static void DumpByte (int y, DumpState *D) {$/;"	f
DumpCode	ldump.c	/^static void DumpCode (const Proto *f, DumpState *D) {$/;"	f
DumpConstants	ldump.c	/^static void DumpConstants (const Proto *f, DumpState *D) {$/;"	f
DumpDebug	ldump.c	/^static void DumpDebug (const Proto *f, DumpState *D) {$/;"	f
DumpFunction	ldump.c	/^static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {$/;"	f
DumpHeader	ldump.c	/^static void DumpHeader (DumpState *D) {$/;"	f
DumpInt	ldump.c	/^static void DumpInt (int x, DumpState *D) {$/;"	f
DumpInteger	ldump.c	/^static void DumpInteger (lua_Integer x, DumpState *D) {$/;"	f
DumpLiteral	ldump.c	37;"	d
DumpNumber	ldump.c	/^static void DumpNumber (lua_Number x, DumpState *D) {$/;"	f
DumpProtos	ldump.c	/^static void DumpProtos (const Proto *f, DumpState *D) {$/;"	f
DumpState	ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon17
DumpString	ldump.c	/^static void DumpString (const TString *s, DumpState *D) {$/;"	f
DumpUpvalues	ldump.c	/^static void DumpUpvalues (const Proto *f, DumpState *D) {$/;"	f
DumpVar	ldump.c	49;"	d
DumpVector	ldump.c	35;"	d
Dyndata	lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
EOFMARK	lua.c	280;"	d
EOZ	lzio.h	16;"	d
ERRFUNC	loadlib.c	320;"	d
ERRLIB	loadlib.c	319;"	d
ERRORSTACKSIZE	ldo.c	169;"	d
EXTRA_STACK	lstate.h	38;"	d
FINALIZEDBIT	lgc.h	81;"	d
FIRST_RESERVED	llex.h	14;"	d
FLAGS	lstrlib.c	889;"	d
FUNCTION	luac.c	120;"	d
Ftypes	lstrlib.c	/^typedef union Ftypes {$/;"	u
Ftypes	lstrlib.c	/^} Ftypes;$/;"	t	typeref:union:Ftypes
FuncState	lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	lstate.h	177;"	d
GCFINALIZECOST	lgc.c	45;"	d
GCObject	lobject.h	/^struct GCObject {$/;"	s
GCObject	lobject.h	/^typedef struct GCObject GCObject;$/;"	t	typeref:struct:GCObject
GCSTEPSIZE	lgc.h	32;"	d
GCSWEEPCOST	lgc.c	39;"	d
GCSWEEPMAX	lgc.c	42;"	d
GCSatomic	lgc.h	40;"	d
GCScallfin	lgc.h	45;"	d
GCSinsideatomic	lgc.c	33;"	d
GCSpause	lgc.h	46;"	d
GCSpropagate	lgc.h	39;"	d
GCSswpallgc	lgc.h	41;"	d
GCSswpend	lgc.h	44;"	d
GCSswpfinobj	lgc.h	42;"	d
GCSswptobefnz	lgc.h	43;"	d
GCTM	lgc.c	/^static void GCTM (lua_State *L, int propagateerrors) {$/;"	f
GCUnion	lstate.h	/^union GCUnion {$/;"	u
GCdebt	lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State
GCestimate	lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State
GCmemtrav	lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State
GETARG_A	lopcodes.h	97;"	d
GETARG_Ax	lopcodes.h	109;"	d
GETARG_B	lopcodes.h	100;"	d
GETARG_Bx	lopcodes.h	106;"	d
GETARG_C	lopcodes.h	103;"	d
GETARG_sBx	lopcodes.h	112;"	d
GET_OPCODE	lopcodes.h	89;"	d
HOOKKEY	ldblib.c	/^static const int HOOKKEY = 0;$/;"	v
Header	lstrlib.c	/^typedef struct Header {$/;"	s
Header	lstrlib.c	/^} Header;$/;"	t	typeref:struct:Header
INDEXK	lopcodes.h	140;"	d
IOPREF_LEN	liolib.c	130;"	d
IO_INPUT	liolib.c	131;"	d
IO_OUTPUT	liolib.c	132;"	d
IO_PREFIX	liolib.c	129;"	d
IS	luac.c	70;"	d
ISK	lopcodes.h	137;"	d
Instruction	llimits.h	/^typedef unsigned int Instruction;$/;"	t
Instruction	llimits.h	/^typedef unsigned long Instruction;$/;"	t
KBx	lvm.c	716;"	d
KGC_EMERGENCY	lstate.h	46;"	d
KGC_NORMAL	lstate.h	45;"	d
KOption	lstrlib.c	/^typedef enum KOption {$/;"	g
KOption	lstrlib.c	/^} KOption;$/;"	t	typeref:enum:KOption
Kchar	lstrlib.c	/^  Kchar,	\/* fixed-length strings *\/$/;"	e	enum:KOption
Kfloat	lstrlib.c	/^  Kfloat,	\/* floating-point numbers *\/$/;"	e	enum:KOption
Kint	lstrlib.c	/^  Kint,		\/* signed integers *\/$/;"	e	enum:KOption
Knop	lstrlib.c	/^  Knop		\/* no-op (configuration or spaces) *\/$/;"	e	enum:KOption
Kpaddalign	lstrlib.c	/^  Kpaddalign,	\/* padding for alignment *\/$/;"	e	enum:KOption
Kpadding	lstrlib.c	/^  Kpadding,	\/* padding *\/$/;"	e	enum:KOption
Kstring	lstrlib.c	/^  Kstring,	\/* strings with prefixed length *\/$/;"	e	enum:KOption
Kuint	lstrlib.c	/^  Kuint,	\/* unsigned integers *\/$/;"	e	enum:KOption
Kzstr	lstrlib.c	/^  Kzstr,	\/* zero-terminated strings *\/$/;"	e	enum:KOption
L	lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	ldump.c	/^  lua_State *L;$/;"	m	struct:__anon17
L	llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	lstrlib.c	/^  lua_State *L;$/;"	m	struct:Header
L	lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState
L	lundump.c	/^  lua_State *L;$/;"	m	struct:__anon16
L	lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
LClosure	lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LDFLAGS	Makefile	/^LDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS)$/;"	m
LEVELS1	lauxlib.c	36;"	d
LEVELS2	lauxlib.c	37;"	d
LEintfloat	lvm.c	/^static int LEintfloat (lua_Integer i, lua_Number f) {$/;"	f
LEnum	lvm.c	/^static int LEnum (const TValue *l, const TValue *r) {$/;"	f
LFIELDS_PER_FLUSH	lopcodes.h	292;"	d
LG	lstate.c	/^typedef struct LG {$/;"	s
LG	lstate.c	/^} LG;$/;"	t	typeref:struct:LG
LHS_assign	lparser.c	/^struct LHS_assign {$/;"	s
LIBS	Makefile	/^LIBS= -lm $(SYSLIBS) $(MYLIBS)$/;"	m
LIB_FAIL	loadlib.c	246;"	d
LIB_FAIL	loadlib.c	247;"	d
LIB_FAIL	loadlib.c	95;"	d
LIB_O	Makefile	/^LIB_O=	lauxlib.o lbaselib.o lbitlib.o lcorolib.o ldblib.o liolib.o \\$/;"	m
LL	lobject.c	436;"	d
LStream	liolib.c	/^typedef luaL_Stream LStream;$/;"	t
LTintfloat	lvm.c	/^static int LTintfloat (lua_Integer i, lua_Number f) {$/;"	f
LTnum	lvm.c	/^static int LTnum (const TValue *l, const TValue *r) {$/;"	f
LUAC_DATA	lundump.h	16;"	d
LUAC_FORMAT	lundump.h	23;"	d
LUAC_INT	lundump.h	18;"	d
LUAC_NUM	lundump.h	19;"	d
LUAC_O	Makefile	/^LUAC_O=	luac.o$/;"	m
LUAC_T	Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	lundump.h	22;"	d
LUAI_BITSINT	luaconf.h	91;"	d
LUAI_BITSINT	luaconf.h	94;"	d
LUAI_DDEC	luaconf.h	273;"	d
LUAI_DDEF	luaconf.h	274;"	d
LUAI_FUNC	luaconf.h	268;"	d
LUAI_FUNC	luaconf.h	270;"	d
LUAI_GCMUL	lstate.c	36;"	d
LUAI_GCPAUSE	lstate.c	32;"	d
LUAI_HASHLIMIT	lstring.c	33;"	d
LUAI_MAXCCALLS	llimits.h	147;"	d
LUAI_MAXSHORTLEN	llimits.h	171;"	d
LUAI_MAXSTACK	luaconf.h	689;"	d
LUAI_MAXSTACK	luaconf.h	691;"	d
LUAI_THROW	ldo.c	58;"	d
LUAI_THROW	ldo.c	66;"	d
LUAI_THROW	ldo.c	73;"	d
LUAI_TRY	ldo.c	59;"	d
LUAI_TRY	ldo.c	67;"	d
LUAI_TRY	ldo.c	74;"	d
LUAI_UACINT	luaconf.h	511;"	d
LUAI_UACNUMBER	luaconf.h	424;"	d
LUAI_UACNUMBER	luaconf.h	440;"	d
LUAI_UACNUMBER	luaconf.h	455;"	d
LUALIB_API	luaconf.h	248;"	d
LUAL_BUFFERSIZE	luaconf.h	719;"	d
LUAL_BUFFERSIZE	luaconf.h	721;"	d
LUAL_NUMSIZES	lauxlib.h	29;"	d
LUAMOD_API	luaconf.h	249;"	d
LUA_A	Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_API	luaconf.h	235;"	d
LUA_API	luaconf.h	237;"	d
LUA_API	luaconf.h	242;"	d
LUA_AUTHORS	lua.h	27;"	d
LUA_BITLIBNAME	lualib.h	35;"	d
LUA_C89_NUMBERS	luaconf.h	81;"	d
LUA_CDIR	luaconf.h	177;"	d
LUA_CDIR	luaconf.h	193;"	d
LUA_COLIBNAME	lualib.h	17;"	d
LUA_COMPAT_APIINTCASTS	luaconf.h	314;"	d
LUA_COMPAT_APIINTCASTS	luaconf.h	323;"	d
LUA_COMPAT_BITLIB	luaconf.h	302;"	d
LUA_COMPAT_IPAIRS	luaconf.h	307;"	d
LUA_COMPAT_LOADERS	luaconf.h	335;"	d
LUA_COMPAT_LOADSTRING	luaconf.h	357;"	d
LUA_COMPAT_LOG10	luaconf.h	351;"	d
LUA_COMPAT_MATHLIB	luaconf.h	297;"	d
LUA_COMPAT_MATHLIB	luaconf.h	322;"	d
LUA_COMPAT_MAXN	luaconf.h	362;"	d
LUA_COMPAT_MODULE	luaconf.h	380;"	d
LUA_COMPAT_UNPACK	luaconf.h	329;"	d
LUA_COPYRIGHT	lua.h	26;"	d
LUA_CORE	lapi.c	8;"	d
LUA_CORE	lcode.c	8;"	d
LUA_CORE	lctype.c	8;"	d
LUA_CORE	ldebug.c	8;"	d
LUA_CORE	ldo.c	8;"	d
LUA_CORE	ldump.c	8;"	d
LUA_CORE	lfunc.c	8;"	d
LUA_CORE	lgc.c	8;"	d
LUA_CORE	llex.c	8;"	d
LUA_CORE	lmem.c	8;"	d
LUA_CORE	lobject.c	8;"	d
LUA_CORE	lopcodes.c	8;"	d
LUA_CORE	lparser.c	8;"	d
LUA_CORE	lstate.c	8;"	d
LUA_CORE	lstring.c	8;"	d
LUA_CORE	ltable.c	8;"	d
LUA_CORE	ltm.c	8;"	d
LUA_CORE	luac.c	218;"	d
LUA_CORE	luac.c	8;"	d
LUA_CORE	lundump.c	8;"	d
LUA_CORE	lvm.c	8;"	d
LUA_CORE	lzio.c	8;"	d
LUA_CPATHVARVERSION	loadlib.c	42;"	d
LUA_CPATH_DEFAULT	luaconf.h	184;"	d
LUA_CPATH_DEFAULT	luaconf.h	198;"	d
LUA_CPATH_VAR	loadlib.c	36;"	d
LUA_CSUBSEP	loadlib.c	74;"	d
LUA_DBLIBNAME	lualib.h	41;"	d
LUA_DIRSEP	luaconf.h	209;"	d
LUA_DIRSEP	luaconf.h	211;"	d
LUA_DL_DLL	luaconf.h	56;"	d
LUA_ENV	llex.h	18;"	d
LUA_ERRERR	lua.h	53;"	d
LUA_ERRFILE	lauxlib.h	20;"	d
LUA_ERRGCMM	lua.h	52;"	d
LUA_ERRMEM	lua.h	51;"	d
LUA_ERRRUN	lua.h	49;"	d
LUA_ERRSYNTAX	lua.h	50;"	d
LUA_EXEC_DIR	loadlib.c	60;"	d
LUA_EXTRASPACE	luaconf.h	700;"	d
LUA_FILEHANDLE	lauxlib.h	182;"	d
LUA_FLOAT_DOUBLE	luaconf.h	115;"	d
LUA_FLOAT_FLOAT	luaconf.h	114;"	d
LUA_FLOAT_LONGDOUBLE	luaconf.h	116;"	d
LUA_FLOAT_TYPE	luaconf.h	127;"	d
LUA_FLOAT_TYPE	luaconf.h	134;"	d
LUA_FLOAT_TYPE	luaconf.h	147;"	d
LUA_FLOORN2I	lvm.h	36;"	d
LUA_GCCOLLECT	lua.h	304;"	d
LUA_GCCOUNT	lua.h	305;"	d
LUA_GCCOUNTB	lua.h	306;"	d
LUA_GCISRUNNING	lua.h	310;"	d
LUA_GCRESTART	lua.h	303;"	d
LUA_GCSETPAUSE	lua.h	308;"	d
LUA_GCSETSTEPMUL	lua.h	309;"	d
LUA_GCSTEP	lua.h	307;"	d
LUA_GCSTOP	lua.h	302;"	d
LUA_HOOKCALL	lua.h	402;"	d
LUA_HOOKCOUNT	lua.h	405;"	d
LUA_HOOKLINE	lua.h	404;"	d
LUA_HOOKRET	lua.h	403;"	d
LUA_HOOKTAILCALL	lua.h	406;"	d
LUA_IDSIZE	luaconf.h	708;"	d
LUA_IGMARK	loadlib.c	63;"	d
LUA_INITVARVERSION	lua.c	40;"	d
LUA_INIT_VAR	lua.c	37;"	d
LUA_INTEGER	luaconf.h	524;"	d
LUA_INTEGER	luaconf.h	532;"	d
LUA_INTEGER	luaconf.h	543;"	d
LUA_INTEGER	luaconf.h	552;"	d
LUA_INTEGER_FMT	luaconf.h	508;"	d
LUA_INTEGER_FRMLEN	luaconf.h	525;"	d
LUA_INTEGER_FRMLEN	luaconf.h	533;"	d
LUA_INTEGER_FRMLEN	luaconf.h	544;"	d
LUA_INTEGER_FRMLEN	luaconf.h	553;"	d
LUA_INT_INT	luaconf.h	109;"	d
LUA_INT_LONG	luaconf.h	110;"	d
LUA_INT_LONGLONG	luaconf.h	111;"	d
LUA_INT_TYPE	luaconf.h	123;"	d
LUA_INT_TYPE	luaconf.h	125;"	d
LUA_INT_TYPE	luaconf.h	133;"	d
LUA_INT_TYPE	luaconf.h	143;"	d
LUA_IOLIBNAME	lualib.h	23;"	d
LUA_KCONTEXT	luaconf.h	622;"	d
LUA_KCONTEXT	luaconf.h	628;"	d
LUA_KCONTEXT	luaconf.h	629;"	d
LUA_LDIR	luaconf.h	176;"	d
LUA_LDIR	luaconf.h	192;"	d
LUA_LIB	lauxlib.c	8;"	d
LUA_LIB	lbaselib.c	8;"	d
LUA_LIB	lbitlib.c	8;"	d
LUA_LIB	lcorolib.c	8;"	d
LUA_LIB	ldblib.c	8;"	d
LUA_LIB	linit.c	9;"	d
LUA_LIB	liolib.c	8;"	d
LUA_LIB	lmathlib.c	8;"	d
LUA_LIB	loadlib.c	12;"	d
LUA_LIB	loslib.c	8;"	d
LUA_LIB	lstrlib.c	8;"	d
LUA_LIB	ltablib.c	8;"	d
LUA_LIB	lutf8lib.c	8;"	d
LUA_LLE_FLAGS	loadlib.c	188;"	d
LUA_LOADLIBNAME	lualib.h	44;"	d
LUA_LSUBSEP	loadlib.c	78;"	d
LUA_MASKCALL	lua.h	412;"	d
LUA_MASKCOUNT	lua.h	415;"	d
LUA_MASKLINE	lua.h	414;"	d
LUA_MASKRET	lua.h	413;"	d
LUA_MATHLIBNAME	lualib.h	38;"	d
LUA_MAXCAPTURES	lstrlib.c	32;"	d
LUA_MAXINPUT	lua.c	33;"	d
LUA_MAXINTEGER	luaconf.h	527;"	d
LUA_MAXINTEGER	luaconf.h	535;"	d
LUA_MAXINTEGER	luaconf.h	546;"	d
LUA_MAXINTEGER	luaconf.h	555;"	d
LUA_MINBUFFER	llimits.h	196;"	d
LUA_MININTEGER	luaconf.h	528;"	d
LUA_MININTEGER	luaconf.h	536;"	d
LUA_MININTEGER	luaconf.h	547;"	d
LUA_MININTEGER	luaconf.h	556;"	d
LUA_MINSTACK	lua.h	79;"	d
LUA_MULTRET	lua.h	34;"	d
LUA_NBITS	lbitlib.c	24;"	d
LUA_NOREF	lauxlib.h	69;"	d
LUA_NUMBER	luaconf.h	420;"	d
LUA_NUMBER	luaconf.h	436;"	d
LUA_NUMBER	luaconf.h	451;"	d
LUA_NUMBER_FMT	luaconf.h	427;"	d
LUA_NUMBER_FMT	luaconf.h	443;"	d
LUA_NUMBER_FMT	luaconf.h	458;"	d
LUA_NUMBER_FRMLEN	luaconf.h	426;"	d
LUA_NUMBER_FRMLEN	luaconf.h	442;"	d
LUA_NUMBER_FRMLEN	luaconf.h	457;"	d
LUA_NUMTAGS	lua.h	74;"	d
LUA_O	Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	loadlib.c	86;"	d
LUA_OK	lua.h	47;"	d
LUA_OPADD	lua.h	196;"	d
LUA_OPBAND	lua.h	203;"	d
LUA_OPBNOT	lua.h	209;"	d
LUA_OPBOR	lua.h	204;"	d
LUA_OPBXOR	lua.h	205;"	d
LUA_OPDIV	lua.h	201;"	d
LUA_OPEQ	lua.h	213;"	d
LUA_OPIDIV	lua.h	202;"	d
LUA_OPLE	lua.h	215;"	d
LUA_OPLT	lua.h	214;"	d
LUA_OPMOD	lua.h	199;"	d
LUA_OPMUL	lua.h	198;"	d
LUA_OPPOW	lua.h	200;"	d
LUA_OPSHL	lua.h	206;"	d
LUA_OPSHR	lua.h	207;"	d
LUA_OPSUB	lua.h	197;"	d
LUA_OPUNM	lua.h	208;"	d
LUA_OSLIBNAME	lualib.h	26;"	d
LUA_PACKPADBYTE	lstrlib.c	1040;"	d
LUA_PATHSUFFIX	loadlib.c	39;"	d
LUA_PATHVARVERSION	loadlib.c	41;"	d
LUA_PATH_DEFAULT	luaconf.h	179;"	d
LUA_PATH_DEFAULT	luaconf.h	194;"	d
LUA_PATH_MARK	loadlib.c	57;"	d
LUA_PATH_SEP	loadlib.c	54;"	d
LUA_PATH_VAR	loadlib.c	32;"	d
LUA_POF	loadlib.c	83;"	d
LUA_PROGNAME	lua.c	29;"	d
LUA_PROMPT	lua.c	24;"	d
LUA_PROMPT2	lua.c	25;"	d
LUA_QL	luaconf.h	732;"	d
LUA_QS	luaconf.h	733;"	d
LUA_REFNIL	lauxlib.h	70;"	d
LUA_REGISTRYINDEX	lua.h	42;"	d
LUA_RELEASE	lua.h	25;"	d
LUA_RIDX_GLOBALS	lua.h	84;"	d
LUA_RIDX_LAST	lua.h	85;"	d
LUA_RIDX_MAINTHREAD	lua.h	83;"	d
LUA_ROOT	luaconf.h	191;"	d
LUA_SHRDIR	luaconf.h	178;"	d
LUA_SIGNATURE	lua.h	31;"	d
LUA_STRFTIMEOPTIONS	loslib.c	33;"	d
LUA_STRFTIMEOPTIONS	loslib.c	35;"	d
LUA_STRLIBNAME	lualib.h	29;"	d
LUA_T	Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	lualib.h	20;"	d
LUA_TBOOLEAN	lua.h	65;"	d
LUA_TCCL	lobject.h	49;"	d
LUA_TDEADKEY	lobject.h	23;"	d
LUA_TFUNCTION	lua.h	70;"	d
LUA_TLCF	lobject.h	48;"	d
LUA_TLCL	lobject.h	47;"	d
LUA_TLIGHTUSERDATA	lua.h	66;"	d
LUA_TLNGSTR	lobject.h	54;"	d
LUA_TMPNAMBUFSIZE	loslib.c	114;"	d
LUA_TMPNAMBUFSIZE	loslib.c	99;"	d
LUA_TMPNAMTEMPLATE	loslib.c	102;"	d
LUA_TNIL	lua.h	64;"	d
LUA_TNONE	lua.h	62;"	d
LUA_TNUMBER	lua.h	67;"	d
LUA_TNUMFLT	lobject.h	58;"	d
LUA_TNUMINT	lobject.h	59;"	d
LUA_TOTALTAGS	lobject.h	28;"	d
LUA_TPROTO	lobject.h	22;"	d
LUA_TSHRSTR	lobject.h	53;"	d
LUA_TSTRING	lua.h	68;"	d
LUA_TTABLE	lua.h	69;"	d
LUA_TTHREAD	lua.h	72;"	d
LUA_TUSERDATA	lua.h	71;"	d
LUA_UNSIGNED	luaconf.h	517;"	d
LUA_USE_C89	luaconf.h	57;"	d
LUA_USE_CTYPE	lctype.h	23;"	d
LUA_USE_CTYPE	lctype.h	26;"	d
LUA_USE_DLOPEN	luaconf.h	63;"	d
LUA_USE_DLOPEN	luaconf.h	70;"	d
LUA_USE_POSIX	luaconf.h	62;"	d
LUA_USE_POSIX	luaconf.h	69;"	d
LUA_USE_READLINE	luaconf.h	64;"	d
LUA_USE_READLINE	luaconf.h	71;"	d
LUA_USE_WINDOWS	luaconf.h	51;"	d
LUA_UTF8LIBNAME	lualib.h	32;"	d
LUA_VDIR	luaconf.h	170;"	d
LUA_VERSION	lua.h	24;"	d
LUA_VERSION_MAJOR	lua.h	19;"	d
LUA_VERSION_MINOR	lua.h	20;"	d
LUA_VERSION_NUM	lua.h	21;"	d
LUA_VERSION_RELEASE	lua.h	22;"	d
LUA_YIELD	lua.h	48;"	d
LX	lstate.c	/^typedef struct LX {$/;"	s
LX	lstate.c	/^} LX;$/;"	t	typeref:struct:LX
L_ESC	lstrlib.c	234;"	d
L_NBFD	lstrlib.c	819;"	d
L_RANDMAX	lmathlib.c	30;"	d
L_RANDMAX	lmathlib.c	34;"	d
L_Umaxalign	llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
L_Umaxalign	llimits.h	/^typedef union { double u; void *s; lua_Integer i; long l; } L_Umaxalign;$/;"	t	typeref:union:__anon7
Labeldesc	lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LexState	llex.h	/^typedef struct LexState {$/;"	s
LexState	llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LoadBlock	lundump.c	/^static void LoadBlock (LoadState *S, void *b, size_t size) {$/;"	f
LoadByte	lundump.c	/^static lu_byte LoadByte (LoadState *S) {$/;"	f
LoadCode	lundump.c	/^static void LoadCode (LoadState *S, Proto *f) {$/;"	f
LoadConstants	lundump.c	/^static void LoadConstants (LoadState *S, Proto *f) {$/;"	f
LoadDebug	lundump.c	/^static void LoadDebug (LoadState *S, Proto *f) {$/;"	f
LoadF	lauxlib.c	/^typedef struct LoadF {$/;"	s
LoadF	lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF
LoadFunction	lundump.c	/^static void LoadFunction (LoadState *S, Proto *f, TString *psource) {$/;"	f
LoadInt	lundump.c	/^static int LoadInt (LoadState *S) {$/;"	f
LoadInteger	lundump.c	/^static lua_Integer LoadInteger (LoadState *S) {$/;"	f
LoadNumber	lundump.c	/^static lua_Number LoadNumber (LoadState *S) {$/;"	f
LoadProtos	lundump.c	/^static void LoadProtos (LoadState *S, Proto *f) {$/;"	f
LoadS	lauxlib.c	/^typedef struct LoadS {$/;"	s
LoadS	lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS
LoadState	lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon16
LoadString	lundump.c	/^static TString *LoadString (LoadState *S) {$/;"	f
LoadUpvalues	lundump.c	/^static void LoadUpvalues (LoadState *S, Proto *f) {$/;"	f
LoadVar	lundump.c	58;"	d
LoadVector	lundump.c	50;"	d
LocVar	lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
MASK	lctype.h	46;"	d
MASK0	lopcodes.h	83;"	d
MASK1	lopcodes.h	80;"	d
MAXABITS	ltable.c	46;"	d
MAXALIGN	lstrlib.c	1069;"	d
MAXARG_A	lopcodes.h	74;"	d
MAXARG_Ax	lopcodes.h	68;"	d
MAXARG_Ax	lopcodes.h	70;"	d
MAXARG_B	lopcodes.h	75;"	d
MAXARG_Bx	lopcodes.h	60;"	d
MAXARG_Bx	lopcodes.h	63;"	d
MAXARG_C	lopcodes.h	76;"	d
MAXARG_sBx	lopcodes.h	61;"	d
MAXARG_sBx	lopcodes.h	64;"	d
MAXASIZE	ltable.c	47;"	d
MAXCCALLS	lstrlib.c	230;"	d
MAXHBITS	ltable.c	55;"	d
MAXINDEXRK	lopcodes.h	142;"	d
MAXINTSIZE	lstrlib.c	1044;"	d
MAXNUMBER2STR	lobject.c	325;"	d
MAXREGS	lcode.c	33;"	d
MAXRN	liolib.c	365;"	d
MAXSIGDIG	lobject.c	189;"	d
MAXSIZE	lstrlib.c	44;"	d
MAXTAGLOOP	lvm.c	35;"	d
MAXUNICODE	lutf8lib.c	23;"	d
MAXUPVAL	lfunc.h	29;"	d
MAXVARS	lparser.c	34;"	d
MAX_FORMAT	lstrlib.c	894;"	d
MAX_INT	llimits.h	51;"	d
MAX_ITEM	lstrlib.c	885;"	d
MAX_LMEM	llimits.h	48;"	d
MAX_LUMEM	llimits.h	46;"	d
MAX_SIZE	llimits.h	42;"	d
MAX_SIZET	llimits.h	39;"	d
MC	lstrlib.c	1050;"	d
MEMERRMSG	lstring.c	25;"	d
MINSIZEARRAY	lmem.c	45;"	d
MINSTRTABSIZE	llimits.h	182;"	d
MYCFLAGS	Makefile	/^MYCFLAGS=$/;"	m
MYINT	lundump.h	21;"	d
MYK	luac.c	286;"	d
MYLDFLAGS	Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	Makefile	/^MYLIBS=$/;"	m
MYOBJS	Makefile	/^MYOBJS=$/;"	m
MatchState	lstrlib.c	/^typedef struct MatchState {$/;"	s
MatchState	lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState
Mbuffer	lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
NB	lstrlib.c	1047;"	d
NBITS	lvm.c	564;"	d
NBM	lvm.c	47;"	d
NILCONSTANT	lobject.h	110;"	d
NONVALIDVALUE	lapi.c	40;"	d
NO_JUMP	lcode.h	20;"	d
NO_REG	lopcodes.h	151;"	d
NUM_OPCODES	lopcodes.h	235;"	d
NUM_RESERVED	llex.h	40;"	d
Node	lobject.h	/^typedef struct Node {$/;"	s
Node	lobject.h	/^} Node;$/;"	t	typeref:struct:Node
OPR_ADD	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_BAND	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BNOT	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BOR	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_CONCAT	lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_EQ	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_IDIV	lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_LE	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SHL	lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SUB	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon23
OP_BAND	lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := RK(B) & RK(C)				*\/$/;"	e	enum:__anon23
OP_BNOT	lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon23
OP_BOR	lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := RK(B) | RK(C)				*\/$/;"	e	enum:__anon23
OP_BXOR	lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := RK(B) ~ RK(C)				*\/$/;"	e	enum:__anon23
OP_CALL	lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon23
OP_CLOSURE	lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon23
OP_CONCAT	lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon23
OP_DIV	lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon23
OP_EQ	lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon23
OP_EXTRAARG	lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon23
OP_FORLOOP	lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon23
OP_FORPREP	lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon23
OP_GETTABLE	lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon23
OP_GETTABUP	lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon23
OP_GETUPVAL	lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon23
OP_IDIV	lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := RK(B) \/\/ RK(C)				*\/$/;"	e	enum:__anon23
OP_JMP	lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A - 1)	*\/$/;"	e	enum:__anon23
OP_LE	lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon23
OP_LEN	lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon23
OP_LOADBOOL	lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon23
OP_LOADK	lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon23
OP_LOADKX	lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon23
OP_LOADNIL	lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon23
OP_LT	lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon23
OP_MOD	lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon23
OP_MOVE	lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon23
OP_MUL	lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon23
OP_NEWTABLE	lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon23
OP_NOT	lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon23
OP_POW	lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon23
OP_RETURN	lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon23
OP_SELF	lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon23
OP_SETLIST	lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon23
OP_SETTABLE	lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon23
OP_SETTABUP	lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon23
OP_SETUPVAL	lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon23
OP_SHL	lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := RK(B) << RK(C)				*\/$/;"	e	enum:__anon23
OP_SHR	lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := RK(B) >> RK(C)				*\/$/;"	e	enum:__anon23
OP_SUB	lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon23
OP_TAILCALL	lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon23
OP_TEST	lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon23
OP_TESTSET	lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon23
OP_TFORCALL	lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon23
OP_TFORLOOP	lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon23
OP_UNM	lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon23
OP_VARARG	lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon23
OUTPUT	luac.c	29;"	d
OpArgK	lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon23
OpMode	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
Output	luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v
PAUSEADJ	lgc.c	59;"	d
PI	lmathlib.c	22;"	d
PI	lmathlib.c	23;"	d
PLAT	Makefile	/^PLAT= none$/;"	m
PLATS	Makefile	/^PLATS= aix bsd c89 freebsd generic linux macosx mingw posix solaris$/;"	m
POS	lobject.c	440;"	d
POS_A	lopcodes.h	47;"	d
POS_Ax	lopcodes.h	51;"	d
POS_B	lopcodes.h	49;"	d
POS_Bx	lopcodes.h	50;"	d
POS_C	lopcodes.h	48;"	d
POS_OP	lopcodes.h	46;"	d
PRE	lobject.c	439;"	d
PRINTBIT	lctype.h	41;"	d
PROGNAME	luac.c	28;"	d
Pfunc	ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
PrintCode	luac.c	/^static void PrintCode(const Proto* f)$/;"	f
PrintConstant	luac.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f
PrintDebug	luac.c	/^static void PrintDebug(const Proto* f)$/;"	f
PrintFunction	luac.c	/^static void PrintFunction(const Proto* f, int full)$/;"	f
PrintHeader	luac.c	/^static void PrintHeader(const Proto* f)$/;"	f
PrintString	luac.c	/^static void PrintString(const TString* ts)$/;"	f
Protect	lvm.c	730;"	d
Proto	lobject.h	/^typedef struct Proto {$/;"	s
Proto	lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
RA	lvm.c	708;"	d
RANLIB	Makefile	/^RANLIB= ranlib$/;"	m
RB	lvm.c	710;"	d
RC	lvm.c	711;"	d
RESERVED	llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	lbaselib.c	324;"	d
RETS	lobject.c	438;"	d
RKASK	lopcodes.h	145;"	d
RKB	lvm.c	712;"	d
RKC	lvm.c	714;"	d
RM	Makefile	/^RM= rm -f$/;"	m
RN	liolib.c	/^} RN;$/;"	t	typeref:struct:__anon15
S	luac.c	393;"	d
SETARG_A	lopcodes.h	98;"	d
SETARG_Ax	lopcodes.h	110;"	d
SETARG_B	lopcodes.h	101;"	d
SETARG_Bx	lopcodes.h	107;"	d
SETARG_C	lopcodes.h	104;"	d
SETARG_sBx	lopcodes.h	113;"	d
SET_OPCODE	lopcodes.h	90;"	d
SIZELENMOD	lstrlib.c	810;"	d
SIZE_A	lopcodes.h	41;"	d
SIZE_Ax	lopcodes.h	42;"	d
SIZE_B	lopcodes.h	39;"	d
SIZE_Bx	lopcodes.h	40;"	d
SIZE_C	lopcodes.h	38;"	d
SIZE_OP	lopcodes.h	44;"	d
SPACEBIT	lctype.h	42;"	d
SPACECHARS	lbaselib.c	46;"	d
SPECIALS	lstrlib.c	235;"	d
SParser	ldo.c	/^struct SParser {  \/* data to 'f_parser' *\/$/;"	s
SS	luac.c	392;"	d
STEPMULADJ	lgc.c	52;"	d
STRCACHE_SIZE	llimits.h	190;"	d
SYSCFLAGS	Makefile	/^SYSCFLAGS=$/;"	m
SYSLDFLAGS	Makefile	/^SYSLDFLAGS=$/;"	m
SYSLIBS	Makefile	/^SYSLIBS=$/;"	m
SZINT	lstrlib.c	1053;"	d
SemInfo	llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon18
StkId	lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
TK_AND	llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DBCOLON	llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_ELSE	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_FALSE	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FLT	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FOR	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GOTO	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IDIV	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IF	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_INT	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_LE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LOCAL	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NIL	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_SHL	llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_STRING	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	lobject.h	/^typedef union TKey {$/;"	u
TKey	lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon19
TM_ADD	ltm.h	/^  TM_ADD,$/;"	e	enum:__anon19
TM_BAND	ltm.h	/^  TM_BAND,$/;"	e	enum:__anon19
TM_BNOT	ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon19
TM_BOR	ltm.h	/^  TM_BOR,$/;"	e	enum:__anon19
TM_BXOR	ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon19
TM_CALL	ltm.h	/^  TM_CALL,$/;"	e	enum:__anon19
TM_CONCAT	ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon19
TM_DIV	ltm.h	/^  TM_DIV,$/;"	e	enum:__anon19
TM_EQ	ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon19
TM_GC	ltm.h	/^  TM_GC,$/;"	e	enum:__anon19
TM_IDIV	ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon19
TM_INDEX	ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon19
TM_LE	ltm.h	/^  TM_LE,$/;"	e	enum:__anon19
TM_LEN	ltm.h	/^  TM_LEN,$/;"	e	enum:__anon19
TM_LT	ltm.h	/^  TM_LT,$/;"	e	enum:__anon19
TM_MOD	ltm.h	/^  TM_MOD,$/;"	e	enum:__anon19
TM_MODE	ltm.h	/^  TM_MODE,$/;"	e	enum:__anon19
TM_MUL	ltm.h	/^  TM_MUL,$/;"	e	enum:__anon19
TM_N	ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon19
TM_NEWINDEX	ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon19
TM_POW	ltm.h	/^  TM_POW,$/;"	e	enum:__anon19
TM_SHL	ltm.h	/^  TM_SHL,$/;"	e	enum:__anon19
TM_SHR	ltm.h	/^  TM_SHR,$/;"	e	enum:__anon19
TM_SUB	ltm.h	/^  TM_SUB,$/;"	e	enum:__anon19
TM_UNM	ltm.h	/^  TM_UNM,$/;"	e	enum:__anon19
TString	lobject.h	/^typedef struct TString {$/;"	s
TString	lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TValue	lobject.h	/^typedef struct lua_TValue TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon9
TValuefields	lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	lobject.h	104;"	d
TabA	ltablib.c	/^} TabA;$/;"	t	typeref:struct:__anon14
Table	lobject.h	/^typedef struct Table {$/;"	s
Table	lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Token	llex.h	/^typedef struct Token {$/;"	s
Token	llex.h	/^} Token;$/;"	t	typeref:struct:Token
UNARY_PRIORITY	lparser.c	1035;"	d
UNUSED	llimits.h	100;"	d
UPVALNAME	luac.c	285;"	d
UTF8BUFFSZ	lobject.h	535;"	d
UTF8PATT	lutf8lib.c	235;"	d
UTString	lobject.h	/^typedef union UTString {$/;"	u
UTString	lobject.h	/^} UTString;$/;"	t	typeref:union:UTString
UUdata	lobject.h	/^typedef union UUdata {$/;"	u
UUdata	lobject.h	/^} UUdata;$/;"	t	typeref:union:UUdata
Udata	lobject.h	/^typedef struct Udata {$/;"	s
Udata	lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
UnOpr	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	lfunc.h	/^struct UpVal {$/;"	s
UpVal	lobject.h	/^typedef struct UpVal UpVal;$/;"	t	typeref:struct:UpVal
Upvaldesc	lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
VCALL	lparser.h	/^  VCALL,	\/* info = instruction pc *\/$/;"	e	enum:__anon10
VFALSE	lparser.h	/^  VFALSE,$/;"	e	enum:__anon10
VINDEXED	lparser.h	/^  VINDEXED,	\/* t = table register\/upvalue; idx = index R\/K *\/$/;"	e	enum:__anon10
VJMP	lparser.h	/^  VJMP,		\/* info = instruction pc *\/$/;"	e	enum:__anon10
VK	lparser.h	/^  VK,		\/* info = index of constant in 'k' *\/$/;"	e	enum:__anon10
VKFLT	lparser.h	/^  VKFLT,	\/* nval = numerical float value *\/$/;"	e	enum:__anon10
VKINT	lparser.h	/^  VKINT,	\/* nval = numerical integer value *\/$/;"	e	enum:__anon10
VLOCAL	lparser.h	/^  VLOCAL,	\/* info = local register *\/$/;"	e	enum:__anon10
VNIL	lparser.h	/^  VNIL,$/;"	e	enum:__anon10
VNONRELOC	lparser.h	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon10
VOID	luac.c	224;"	d
VRELOCABLE	lparser.h	/^  VRELOCABLE,	\/* info = instruction pc *\/$/;"	e	enum:__anon10
VTRUE	lparser.h	/^  VTRUE,$/;"	e	enum:__anon10
VUPVAL	lparser.h	/^  VUPVAL,       \/* info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon10
VVARARG	lparser.h	/^  VVARARG	\/* info = instruction pc *\/$/;"	e	enum:__anon10
VVOID	lparser.h	/^  VVOID,	\/* no value *\/$/;"	e	enum:__anon10
Value	lobject.h	/^typedef union Value Value;$/;"	t	typeref:union:Value
Value	lobject.h	/^union Value {$/;"	u
Vardesc	lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
WHITE0BIT	lgc.h	78;"	d
WHITE1BIT	lgc.h	79;"	d
WHITEBITS	lgc.h	84;"	d
XDIGITBIT	lctype.h	43;"	d
Z	lundump.c	/^  ZIO *Z;$/;"	m	struct:__anon16
ZIO	lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	lzio.h	/^struct Zio {$/;"	s
_CRT_SECURE_NO_WARNINGS	lprefix.h	39;"	d
_FILE_OFFSET_BITS	lprefix.h	27;"	d
_LARGEFILE_SOURCE	lprefix.h	26;"	d
_XOPEN_SOURCE	lprefix.h	17;"	d
_XOPEN_SOURCE	lprefix.h	19;"	d
actvar	lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon13
add_s	lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f
add_value	lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f
addbuff	lstate.c	77;"	d
adddigit	lstrlib.c	/^static lua_Number adddigit (char *buff, int n, lua_Number x) {$/;"	f
addfield	ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, TabA *ta, lua_Integer i) {$/;"	f
addk	lcode.c	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f
addlenmod	lstrlib.c	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f
addprototype	lparser.c	/^static Proto *addprototype (LexState *ls) {$/;"	f
addquoted	lstrlib.c	/^static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f
addreturn	lua.c	/^static int addreturn (lua_State *L) {$/;"	f
addstr	lobject.c	442;"	d
addtoclib	loadlib.c	/^static void addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f
adjust_assign	lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f
adjust_varargs	ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f
adjustlocalvars	lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f
adjustresults	lapi.h	17;"	d
allgc	lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
allowhook	lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
allweak	lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State
andaux	lbitlib.c	/^static lua_Unsigned andaux (lua_State *L) {$/;"	f
api_check	llimits.h	95;"	d
api_checknelems	lapi.h	20;"	d
api_checkstackindex	lapi.c	56;"	d
api_checkvalidindex	lapi.c	54;"	d
api_incr_top	lapi.h	14;"	d
arr	lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon13
arr	lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist
array	lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
arrayindex	ltable.c	/^static unsigned int arrayindex (const TValue *key) {$/;"	f
assignment	lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f
atomic	lgc.c	/^static l_mem atomic (lua_State *L) {$/;"	f
aux_close	liolib.c	/^static int aux_close (lua_State *L) {$/;"	f
aux_getn	ltablib.c	55;"	d
aux_lines	liolib.c	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f
aux_upvalue	lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val,$/;"	f
auxgetinfo	ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f
auxresume	lcorolib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f
auxsort	ltablib.c	/^static void auxsort (lua_State *L, TabA *ta, int l, int u) {$/;"	f
auxupvalue	ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f
b	lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer
b	ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp
b	lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value
b	lundump.c	/^  Mbuffer *b;$/;"	m	struct:__anon16
b_and	lbitlib.c	/^static int b_and (lua_State *L) {$/;"	f
b_arshift	lbitlib.c	/^static int b_arshift (lua_State *L) {$/;"	f
b_extract	lbitlib.c	/^static int b_extract (lua_State *L) {$/;"	f
b_lrot	lbitlib.c	/^static int b_lrot (lua_State *L) {$/;"	f
b_lshift	lbitlib.c	/^static int b_lshift (lua_State *L) {$/;"	f
b_not	lbitlib.c	/^static int b_not (lua_State *L) {$/;"	f
b_or	lbitlib.c	/^static int b_or (lua_State *L) {$/;"	f
b_replace	lbitlib.c	/^static int b_replace (lua_State *L) {$/;"	f
b_rot	lbitlib.c	/^static int b_rot (lua_State *L, lua_Integer d) {$/;"	f
b_rrot	lbitlib.c	/^static int b_rrot (lua_State *L) {$/;"	f
b_rshift	lbitlib.c	/^static int b_rshift (lua_State *L) {$/;"	f
b_shift	lbitlib.c	/^static int b_shift (lua_State *L, lua_Unsigned r, lua_Integer i) {$/;"	f
b_str2int	lbaselib.c	/^static const char *b_str2int (const char *s, int base, lua_Integer *pn) {$/;"	f
b_test	lbitlib.c	/^static int b_test (lua_State *L) {$/;"	f
b_xor	lbitlib.c	/^static int b_xor (lua_State *L) {$/;"	f
base	lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anon20::__anon21
base_ci	lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State
base_funcs	lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v
basehookcount	lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
bit2mask	lgc.h	71;"	d
bitlib	lbitlib.c	/^static const luaL_Reg bitlib[] = {$/;"	v
bitmask	lgc.h	70;"	d
bl	lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	lgc.c	71;"	d
block	lparser.c	/^static void block (LexState *ls) {$/;"	f
block_follow	lparser.c	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f
body	lparser.c	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f
boolK	lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f
breaklabel	lparser.c	/^static void breaklabel (LexState *ls) {$/;"	f
buff	lauxlib.c	/^  char buff[BUFSIZ];  \/* area for reading file *\/$/;"	m	struct:LoadF
buff	ldo.c	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser
buff	liolib.c	/^  char buff[MAXRN + 1];  \/* +1 for ending '\\0' *\/$/;"	m	struct:__anon15
buff	llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatenation *\/$/;"	m	struct:global_State
buff	lstrlib.c	/^  char buff[5 * sizeof(lua_Number)];  \/* enough for any float type *\/$/;"	m	union:Ftypes
buff2num	llex.c	223;"	d
buffer	lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffonstack	lauxlib.c	442;"	d
buffreplace	llex.c	/^static void buffreplace (LexState *ls, char from, char to) {$/;"	f
buffsize	lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
bvalue	lobject.h	166;"	d
byteoffset	lutf8lib.c	/^static int byteoffset (lua_State *L) {$/;"	f
c	liolib.c	/^  int c;  \/* current character (look ahead) *\/$/;"	m	struct:__anon15
c	lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	lstate.h	/^    } c;$/;"	m	union:CallInfo::__anon20	typeref:struct:CallInfo::__anon20::__anon22
c	lstrlib.c	/^  char c;$/;"	m	struct:cD
cD	lstrlib.c	/^struct cD {$/;"	s
cache	lobject.h	/^  struct LClosure *cache;  \/* last-created closure with this prototype *\/$/;"	m	struct:Proto	typeref:struct:Proto::LClosure
callallpendingfinalizers	lgc.c	/^static void callallpendingfinalizers (lua_State *L, int propagateerrors) {$/;"	f
callhook	ldo.c	/^static void callhook (lua_State *L, CallInfo *ci) {$/;"	f
callstatus	lstate.h	/^  lu_byte callstatus;$/;"	m	struct:CallInfo
cannot	luac.c	/^static void cannot(const char* what)$/;"	f
capture	lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon4
capture_to_close	lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f
cast	llimits.h	105;"	d
cast_byte	llimits.h	108;"	d
cast_func	loadlib.c	145;"	d
cast_func	loadlib.c	147;"	d
cast_int	llimits.h	110;"	d
cast_num	llimits.h	109;"	d
cast_u	lstate.h	194;"	d
cast_uchar	llimits.h	111;"	d
cast_void	llimits.h	107;"	d
changewhite	lgc.h	98;"	d
check	lparser.c	/^static void check (LexState *ls, int c) {$/;"	f
checkGC	lvm.c	732;"	d
checkHeader	lundump.c	/^static void checkHeader (LoadState *S) {$/;"	f
checkSizes	lgc.c	/^static void checkSizes (lua_State *L, global_State *g) {$/;"	f
check_capture	lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f
check_condition	lparser.c	118;"	d
check_conflict	lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f
check_exp	llimits.h	79;"	d
check_exp	llimits.h	84;"	d
check_match	lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f
check_next1	llex.c	/^static int check_next1 (LexState *ls, int c) {$/;"	f
check_next2	llex.c	/^static int check_next2 (LexState *ls, const char *set) {$/;"	f
checkclib	loadlib.c	/^static void *checkclib (lua_State *L, const char *path) {$/;"	f
checkconsistency	lgc.c	79;"	d
checkdeadkey	lgc.c	76;"	d
checklimit	lparser.c	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f
checkliteral	lundump.c	/^static void checkliteral (LoadState *S, const char *s, const char *msg) {$/;"	f
checkliveness	lobject.h	180;"	d
checkload	loadlib.c	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f
checkmode	ldo.c	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f
checkname	lparser.c	/^static void checkname (LexState *ls, expdesc *e) {$/;"	f
checknext	lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f
checkoption	loslib.c	/^static const char *checkoption (lua_State *L, const char *conv, char *buff) {$/;"	f
checkrepeated	lparser.c	/^static void checkrepeated (FuncState *fs, Labellist *ll, TString *label) {$/;"	f
checkresults	lapi.c	880;"	d
checksize	lundump.c	230;"	d
checkstack	ldblib.c	/^static void checkstack (lua_State *L, lua_State *L1, int n) {$/;"	f
checktab	ltablib.c	/^static void checktab (lua_State *L, int arg, TabA *ta) {$/;"	f
checktag	lobject.h	130;"	d
checktype	lobject.h	131;"	d
checkupval	ldblib.c	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f
chgfltvalue	lobject.h	191;"	d
chgivalue	lobject.h	197;"	d
ci	lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	ldebug.c	38;"	d
cl	lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:GCUnion::Closure
clCvalue	lobject.h	163;"	d
clLvalue	lobject.h	162;"	d
classend	lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f
clearkeys	lgc.c	/^static void clearkeys (global_State *g, GCObject *l, GCObject *f) {$/;"	f
clearvalues	lgc.c	/^static void clearvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f
close_func	lparser.c	/^static void close_func (LexState *ls) {$/;"	f
close_state	lstate.c	/^static void close_state (lua_State *L) {$/;"	f
closef	lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream
closegoto	lparser.c	/^static void closegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f
closelistfield	lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f
clvalue	lobject.h	161;"	d
co_funcs	lcorolib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v
code	lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto
code_label	lcode.c	/^static int code_label (FuncState *fs, int A, int b, int jump) {$/;"	f
codeclosure	lparser.c	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f
codecomp	lcode.c	/^static void codecomp (FuncState *fs, OpCode op, int cond, expdesc *e1,$/;"	f
codeexpval	lcode.c	/^static void codeexpval (FuncState *fs, OpCode op,$/;"	f
codeextraarg	lcode.c	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f
codenot	lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f
codepoint	lutf8lib.c	/^static int codepoint (lua_State *L) {$/;"	f
codestring	lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f
collectargs	lua.c	/^static int collectargs (char **argv, int *first) {$/;"	f
collectvalidlines	ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f
combine	luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f
computesizes	ltable.c	/^static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {$/;"	f
cond	lparser.c	/^static int cond (LexState *ls) {$/;"	f
condchangemem	llimits.h	307;"	d
condchangemem	llimits.h	309;"	d
condjump	lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f
condmovestack	llimits.h	300;"	d
condmovestack	llimits.h	303;"	d
constfolding	lcode.c	/^static int constfolding (FuncState *fs, int op, expdesc *e1, expdesc *e2) {$/;"	f
constructor	lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f
convergeephemerons	lgc.c	/^static void convergeephemerons (global_State *g) {$/;"	f
copywithendian	lstrlib.c	/^static void copywithendian (volatile char *dest, volatile const char *src,$/;"	f
correctstack	ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f
countint	ltable.c	/^static int countint (const TValue *key, unsigned int *nums) {$/;"	f
countlevels	lauxlib.c	/^static int countlevels (lua_State *L) {$/;"	f
createargtable	lua.c	/^static void createargtable (lua_State *L, char **argv, int argc, int script) {$/;"	f
createclibstable	loadlib.c	/^static void createclibstable (lua_State *L) {$/;"	f
createmeta	liolib.c	/^static void createmeta (lua_State *L) {$/;"	f
createmetatable	lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f
createsearcherstable	loadlib.c	/^static void createsearcherstable (lua_State *L) {$/;"	f
createstdfile	liolib.c	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f
createstrobj	lstring.c	/^static TString *createstrobj (lua_State *L, const char *str, size_t l,$/;"	f
ctb	lobject.h	66;"	d
ctx	lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anon20::__anon22
currIsNewline	llex.c	36;"	d
current	llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
currentline	ldebug.c	/^static int currentline (CallInfo *ci) {$/;"	f
currentline	lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	ldebug.c	/^static int currentpc (CallInfo *ci) {$/;"	f
currentwhite	lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
cvt2num	lvm.h	24;"	d
cvt2num	lvm.h	26;"	d
cvt2str	lvm.h	17;"	d
cvt2str	lvm.h	19;"	d
d	lstrlib.c	/^  double d;$/;"	m	union:Ftypes
d	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon6
data	ldump.c	/^  void *data;$/;"	m	struct:__anon17
data	lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio
db_debug	ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f
db_gethook	ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f
db_getinfo	ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f
db_getlocal	ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f
db_getmetatable	ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f
db_getregistry	ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f
db_getupvalue	ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f
db_getuservalue	ldblib.c	/^static int db_getuservalue (lua_State *L) {$/;"	f
db_sethook	ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f
db_setlocal	ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f
db_setmetatable	ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f
db_setupvalue	ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f
db_setuservalue	ldblib.c	/^static int db_setuservalue (lua_State *L) {$/;"	f
db_traceback	ldblib.c	/^static int db_traceback (lua_State *L) {$/;"	f
db_upvalueid	ldblib.c	/^static int db_upvalueid (lua_State *L) {$/;"	f
db_upvaluejoin	ldblib.c	/^static int db_upvaluejoin (lua_State *L) {$/;"	f
dblib	ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v
deadvalue	lobject.h	169;"	d
decpoint	llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState
digit	lstrlib.c	/^static int digit (int c) { return '0' <= c && c <= '9'; }$/;"	f
discharge2anyreg	lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f
discharge2reg	lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f
dischargejpc	lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f
doREPL	lua.c	/^static void doREPL (lua_State *L) {$/;"	f
doargs	luac.c	/^static int doargs(int argc, char* argv[])$/;"	f
docall	lua.c	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f
dochunk	lua.c	/^static int dochunk (lua_State *L, int status) {$/;"	f
dofile	lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f
dofilecont	lbaselib.c	/^static int dofilecont (lua_State *L, int d1, lua_KContext d2) {$/;"	f
dojump	lvm.c	721;"	d
dolibrary	lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f
donextjump	lvm.c	727;"	d
dooptions	loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f
dostring	lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f
dothecall	lgc.c	/^static void dothecall (lua_State *L, void *ud) {$/;"	f
dummy	lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for 'local' udata *\/$/;"	m	union:UUdata
dummy	lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:UTString
dummy	lstrlib.c	/^  int dummy;$/;"	m	union:__anon5
dummynode	ltable.c	75;"	d
dummynode_	ltable.c	/^static const Node dummynode_ = {$/;"	v
dumping	luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v
dyd	ldo.c	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser
dyd	llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::Dyndata
end_capture	lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f
endpc	lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
enterblock	lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f
enterlevel	lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f
entersweep	lgc.c	/^static int entersweep (lua_State *L) {$/;"	f
envn	llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState
ephemeron	lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State
eqshrstr	lstring.h	33;"	d
eqstr	lparser.c	42;"	d
errfile	lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f
errfunc	lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
error	lundump.c	/^static l_noret error(LoadState *S, const char *why) {$/;"	f
errorJmp	lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	lparser.c	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f
errorlimit	lparser.c	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f
errorstatus	ldo.c	38;"	d
esccheck	llex.c	/^static void esccheck (LexState *ls, int c, const char *msg) {$/;"	f
event	lua.h	/^  int event;$/;"	m	struct:lua_Debug
exp1	lparser.c	/^static int exp1 (LexState *ls) {$/;"	f
exp2reg	lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f
expdesc	lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expkind	lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon10
explist	lparser.c	/^static int explist (LexState *ls, expdesc *v) {$/;"	f
expr	lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f
exprstat	lparser.c	/^static void exprstat (LexState *ls) {$/;"	f
extra	lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString
extra	lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo
extra_	lstate.c	/^  lu_byte extra_[LUA_EXTRASPACE];$/;"	m	struct:LX
f	lauxlib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF
f	lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream
f	liolib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:__anon15
f	lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value
f	lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc
f	lstrlib.c	/^  float f;$/;"	m	union:Ftypes
f_call	lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f
f_flush	liolib.c	/^static int f_flush (lua_State *L) {$/;"	f
f_gc	liolib.c	/^static int f_gc (lua_State *L) {$/;"	f
f_lines	liolib.c	/^static int f_lines (lua_State *L) {$/;"	f
f_luaopen	lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f
f_parser	ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f
f_read	liolib.c	/^static int f_read (lua_State *L) {$/;"	f
f_seek	liolib.c	/^static int f_seek (lua_State *L) {$/;"	f
f_setvbuf	liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f
f_tostring	liolib.c	/^static int f_tostring (lua_State *L) {$/;"	f
f_write	liolib.c	/^static int f_write (lua_State *L) {$/;"	f
fasttm	ltm.h	51;"	d
fatal	luac.c	/^static void fatal(const char* message)$/;"	f
fchecksize	lundump.c	/^static void fchecksize (LoadState *S, size_t size, const char *tname) {$/;"	f
field	lparser.c	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f
fieldargs	lbitlib.c	/^static int fieldargs (lua_State *L, int farg, int *width) {$/;"	f
fieldsel	lparser.c	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f
filterpc	ldebug.c	/^static int filterpc (int pc, int jmptarget) {$/;"	f
findfield	lauxlib.c	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f
findfile	loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f
findgotos	lparser.c	/^static void findgotos (LexState *ls, Labeldesc *lb) {$/;"	f
findindex	ltable.c	/^static unsigned int findindex (lua_State *L, Table *t, StkId key) {$/;"	f
findlabel	lparser.c	/^static int findlabel (LexState *ls, int g) {$/;"	f
findlast	lgc.c	/^static GCObject **findlast (GCObject **p) {$/;"	f
findloader	loadlib.c	/^static void findloader (lua_State *L, const char *name) {$/;"	f
findlocal	ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n,$/;"	f
findpcall	ldo.c	/^static CallInfo *findpcall (lua_State *L) {$/;"	f
findsetreg	ldebug.c	/^static int findsetreg (Proto *p, int lastpc, int reg) {$/;"	f
findvararg	ldebug.c	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f
finishCcall	ldo.c	/^static void finishCcall (lua_State *L, int status) {$/;"	f
finishpcall	lbaselib.c	/^static int finishpcall (lua_State *L, int status, lua_KContext extra) {$/;"	f
finobj	lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State
firstgoto	lparser.c	/^  int firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt
firstlabel	lparser.c	/^  int firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt
firstlocal	lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState
fixedgc	lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State
fixjump	lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f
flags	lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table
flib	liolib.c	/^static const luaL_Reg flib[] = {$/;"	v
fltvalue	lobject.h	154;"	d
forbody	lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f
forlimit	lvm.c	/^static int forlimit (const TValue *obj, lua_Integer *p, lua_Integer step,$/;"	f
forlist	lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f
fornum	lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f
forstat	lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f
frealloc	lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
freeLclosure	lgc.c	/^static void freeLclosure (lua_State *L, LClosure *cl) {$/;"	f
freeexp	lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f
freelist	lauxlib.c	530;"	d
freeobj	lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f
freereg	lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f
freereg	lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	lstate.c	/^static void freestack (lua_State *L) {$/;"	f
fromstate	lstate.c	70;"	d
fs	llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
func	lapi.c	/^  StkId func;$/;"	m	struct:CallS
func	lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
funcargs	lparser.c	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f
funcinfo	ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f
funcname	lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f
funcs	lutf8lib.c	/^static const luaL_Reg funcs[] = {$/;"	v
funcstat	lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f
fvalue	lobject.h	164;"	d
g	lstate.c	/^  global_State g;$/;"	m	struct:LG
g_iofile	liolib.c	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f
g_read	liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f
g_write	liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f
gc	lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value
gc	lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion
gcfinnum	lstate.h	/^  unsigned int gcfinnum;  \/* number of finalizers to call in each GC step *\/$/;"	m	struct:global_State
gckind	lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State
gclist	lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gco2ccl	lstate.h	201;"	d
gco2cl	lstate.h	202;"	d
gco2lcl	lstate.h	200;"	d
gco2p	lstate.h	205;"	d
gco2t	lstate.h	204;"	d
gco2th	lstate.h	206;"	d
gco2ts	lstate.h	197;"	d
gco2u	lstate.h	199;"	d
gcpause	lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcrunning	lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State
gcstate	lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	lstate.h	/^  int gcstepmul;  \/* GC 'granularity' *\/$/;"	m	struct:global_State
gctm	loadlib.c	/^static int gctm (lua_State *L) {$/;"	f
gcvalue	lobject.h	157;"	d
generic_reader	lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f
getBMode	lopcodes.h	282;"	d
getCMode	lopcodes.h	283;"	d
getF	lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f
getOpMode	lopcodes.h	281;"	d
getS	lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f
get_prompt	lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f
getaddrstr	lobject.h	332;"	d
getarg	lopcodes.h	93;"	d
getbinopr	lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f
getboolfield	loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f
getcached	lvm.c	/^static LClosure *getcached (Proto *p, UpVal **encup, StkId base) {$/;"	f
getco	lcorolib.c	/^static lua_State *getco (lua_State *L) {$/;"	f
getcode	lcode.h	43;"	d
getdebt	lgc.c	/^static l_mem getdebt (global_State *g) {$/;"	f
getdetails	lstrlib.c	/^static KOption getdetails (Header *h, size_t totalsize,$/;"	f
getfield	loslib.c	/^static int getfield (lua_State *L, const char *key, int d) {$/;"	f
getfreepos	ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f
getfuncline	ldebug.h	16;"	d
getfuncname	ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f
gethexa	llex.c	/^static int gethexa (LexState *ls) {$/;"	f
geti	ltablib.c	/^  int (*geti) (lua_State *L, int idx, lua_Integer n);$/;"	m	struct:__anon14
getiofile	liolib.c	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f
getjump	lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f
getjumpcontrol	lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f
getlocvar	lparser.c	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f
getnum	lstrlib.c	/^static int getnum (const char **fmt, int df) {$/;"	f
getnumlimit	lstrlib.c	/^static int getnumlimit (Header *h, const char **fmt, int df) {$/;"	f
getoah	lstate.h	103;"	d
getobjname	ldebug.c	/^static const char *getobjname (Proto *p, int lastpc, int reg,$/;"	f
getoption	lstrlib.c	/^static KOption getoption (Header *h, const char **fmt, int *size) {$/;"	f
getproto	lobject.h	472;"	d
getstr	lobject.h	333;"	d
getthread	ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f
gettotalbytes	lstate.h	215;"	d
getudatamem	lobject.h	372;"	d
getunopr	lparser.c	/^static UnOpr getunopr (int op) {$/;"	f
getupvalname	ldebug.c	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f
getupvalref	lapi.c	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f
getuservalue	lobject.h	381;"	d
gfasttm	ltm.h	48;"	d
gkey	ltable.h	19;"	d
globalL	lua.c	/^static lua_State *globalL = NULL;$/;"	v
global_State	lstate.h	/^typedef struct global_State {$/;"	s
global_State	lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
gmatch	lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f
gmatch_aux	lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f
gnext	ltable.h	15;"	d
gnode	ltable.h	13;"	d
gnodelast	lgc.c	107;"	d
gotostat	lparser.c	/^static void gotostat (LexState *ls, int pc) {$/;"	f
gray	lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	lgc.h	99;"	d
grayagain	lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
growstack	lapi.c	/^static void growstack (lua_State *L, void *ud) {$/;"	f
gt	lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata
gval	ltable.h	14;"	d
h	llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState
h	lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Table
handle_luainit	lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f
handle_script	lua.c	/^static int handle_script (lua_State *L, char **argv) {$/;"	f
has_E	lua.c	459;"	d
has_e	lua.c	458;"	d
has_error	lua.c	455;"	d
has_i	lua.c	456;"	d
has_v	lua.c	457;"	d
hash	lobject.h	/^  unsigned int hash;$/;"	m	struct:TString
hash	lstate.h	/^  TString **hash;$/;"	m	struct:stringtable
hashboolean	ltable.c	61;"	d
hashint	ltable.c	62;"	d
hashmod	ltable.c	69;"	d
hashpointer	ltable.c	72;"	d
hashpow2	ltable.c	58;"	d
hashstr	ltable.c	60;"	d
hasjumps	lcode.c	36;"	d
hasmultret	lparser.c	37;"	d
hnext	lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anon8	typeref:struct:TString::__anon8::TString
hook	lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State
hookcount	lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f
hookmask	lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State
hvalue	lobject.h	165;"	d
i	llex.h	/^  lua_Integer i;$/;"	m	union:__anon18
i	llimits.h	/^typedef union { double u; void *s; lua_Integer i; long l; } L_Umaxalign;$/;"	m	union:__anon7
i	lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value
i	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon6
iABC	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:lua_Debug::CallInfo
i_key	lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	lobject.h	/^  TValue i_val;$/;"	m	struct:Node
idx	lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc
idx	lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anon11::__anon12
idx	lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc
ifstat	lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f
inclinenumber	llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f
incomplete	lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f
incr_top	ldo.h	20;"	d
ind	lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon11	typeref:struct:expdesc::__anon11::__anon12
index2addr	lapi.c	/^static TValue *index2addr (lua_State *L, int idx) {$/;"	f
info	lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon11
init	lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon4
init_exp	lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f
init_registry	lstate.c	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f
initb	lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer
initheader	lstrlib.c	/^static void initheader (lua_State *L, Header *h) {$/;"	f
instack	lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc
intarith	lobject.c	/^static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,$/;"	f
internshrstr	lstring.c	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f
interror	lauxlib.c	/^static void interror (lua_State *L, int arg) {$/;"	f
intop	lvm.h	46;"	d
invalidateTMcache	ltable.h	23;"	d
invertjump	lcode.c	/^static void invertjump (FuncState *fs, expdesc *e) {$/;"	f
io_close	liolib.c	/^static int io_close (lua_State *L) {$/;"	f
io_fclose	liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f
io_flush	liolib.c	/^static int io_flush (lua_State *L) {$/;"	f
io_input	liolib.c	/^static int io_input (lua_State *L) {$/;"	f
io_lines	liolib.c	/^static int io_lines (lua_State *L) {$/;"	f
io_noclose	liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f
io_open	liolib.c	/^static int io_open (lua_State *L) {$/;"	f
io_output	liolib.c	/^static int io_output (lua_State *L) {$/;"	f
io_pclose	liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f
io_popen	liolib.c	/^static int io_popen (lua_State *L) {$/;"	f
io_read	liolib.c	/^static int io_read (lua_State *L) {$/;"	f
io_readline	liolib.c	/^static int io_readline (lua_State *L) {$/;"	f
io_tmpfile	liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f
io_type	liolib.c	/^static int io_type (lua_State *L) {$/;"	f
io_write	liolib.c	/^static int io_write (lua_State *L) {$/;"	f
iolib	liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v
ipairsaux	lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f
ipairsaux_raw	lbaselib.c	/^static int ipairsaux_raw (lua_State *L) {$/;"	f
isLfunction	lobject.h	470;"	d
isLua	lstate.h	99;"	d
is_vararg	lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto
isblack	lgc.h	88;"	d
iscleared	lgc.c	/^static int iscleared (global_State *g, const TValue *o) {$/;"	f
isclosed	liolib.c	140;"	d
iscollectable	lobject.h	174;"	d
iscont	lutf8lib.c	25;"	d
isdead	lgc.h	96;"	d
isdeadm	lgc.h	95;"	d
isdummy	ltable.c	77;"	d
isemptystr	lvm.c	444;"	d
isgray	lgc.h	89;"	d
isinstack	ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f
isintwups	lfunc.h	22;"	d
islittle	lstrlib.c	/^  int islittle;$/;"	m	struct:Header
isloop	lparser.c	/^  lu_byte isloop;  \/* true if 'block' is a loop *\/$/;"	m	struct:BlockCnt
isneg	lobject.c	/^static int isneg (const char **s) {$/;"	f
ispseudo	lapi.c	46;"	d
isreserved	lstring.h	27;"	d
isstackindex	lapi.c	52;"	d
issweepphase	lgc.h	49;"	d
istailcall	lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug
isupvalue	lapi.c	49;"	d
isvalid	lapi.c	43;"	d
isvararg	lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug
iswhite	lgc.h	87;"	d
iter_aux	lutf8lib.c	/^static int iter_aux (lua_State *L) {$/;"	f
iter_codes	lutf8lib.c	/^static int iter_codes (lua_State *L) {$/;"	f
ival	lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anon11
ivalue	lobject.h	153;"	d
jpc	lparser.h	/^  int jpc;  \/* list of pending jumps to 'pc' *\/$/;"	m	struct:FuncState
jumponcond	lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f
k	lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anon20::__anon22
keepinvariant	lgc.h	61;"	d
keyfromval	ltable.h	27;"	d
kname	ldebug.c	/^static void kname (Proto *p, int pc, int c, const char **name) {$/;"	f
l	llimits.h	/^typedef union { double u; void *s; lua_Integer i; long l; } L_Umaxalign;$/;"	m	union:__anon7
l	lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	lstate.c	/^  LX l;$/;"	m	struct:LG
l	lstate.c	/^  lua_State l;$/;"	m	struct:LX
l	lstate.h	/^    } l;$/;"	m	union:CallInfo::__anon20	typeref:struct:CallInfo::__anon20::__anon21
l_G	lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f
l_castS2U	llimits.h	116;"	d
l_castU2S	llimits.h	125;"	d
l_checkmode	liolib.c	33;"	d
l_checktime	loslib.c	57;"	d
l_floor	luaconf.h	471;"	d
l_fseek	liolib.c	103;"	d
l_fseek	liolib.c	111;"	d
l_fseek	liolib.c	118;"	d
l_ftell	liolib.c	104;"	d
l_ftell	liolib.c	112;"	d
l_ftell	liolib.c	119;"	d
l_getc	liolib.c	79;"	d
l_getc	liolib.c	83;"	d
l_gmtime	loslib.c	70;"	d
l_gmtime	loslib.c	76;"	d
l_hashfloat	ltable.c	/^static int l_hashfloat (lua_Number n) {$/;"	f
l_inspectstat	lauxlib.c	250;"	d
l_inspectstat	lauxlib.c	256;"	d
l_intfitsf	lvm.c	59;"	d
l_isfalse	lobject.h	171;"	d
l_localtime	loslib.c	71;"	d
l_localtime	loslib.c	77;"	d
l_lockfile	liolib.c	80;"	d
l_lockfile	liolib.c	84;"	d
l_mathlim	luaconf.h	422;"	d
l_mathlim	luaconf.h	438;"	d
l_mathlim	luaconf.h	453;"	d
l_mathop	luaconf.h	429;"	d
l_mathop	luaconf.h	445;"	d
l_mathop	luaconf.h	460;"	d
l_mathop	luaconf.h	609;"	d
l_mathop	luaconf.h	611;"	d
l_mem	llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_mem	llimits.h	/^typedef long l_mem;$/;"	t
l_mem	llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t
l_message	lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f
l_noret	llimits.h	133;"	d
l_noret	llimits.h	135;"	d
l_noret	llimits.h	137;"	d
l_pclose	liolib.c	53;"	d
l_pclose	liolib.c	58;"	d
l_pclose	liolib.c	67;"	d
l_popen	liolib.c	52;"	d
l_popen	liolib.c	57;"	d
l_popen	liolib.c	63;"	d
l_print	lua.c	/^static void l_print (lua_State *L) {$/;"	f
l_pushtime	loslib.c	56;"	d
l_rand	lmathlib.c	28;"	d
l_rand	lmathlib.c	32;"	d
l_registry	lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_seeknum	liolib.c	105;"	d
l_seeknum	liolib.c	113;"	d
l_seeknum	liolib.c	120;"	d
l_setbit	lgc.h	72;"	d
l_srand	lmathlib.c	29;"	d
l_srand	lmathlib.c	33;"	d
l_str2d	lobject.c	/^static const char *l_str2d (const char *s, lua_Number *result) {$/;"	f
l_str2int	lobject.c	/^static const char *l_str2int (const char *s, lua_Integer *result) {$/;"	f
l_strcmp	lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f
l_timet	loslib.c	55;"	d
l_uacInt	llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t
l_uacNumber	llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
l_unlockfile	liolib.c	81;"	d
l_unlockfile	liolib.c	85;"	d
label	lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata
labelstat	lparser.c	/^static void labelstat (LexState *ls, TString *label, int line) {$/;"	f
laction	lua.c	/^static void laction (int i) {$/;"	f
lapi_c	lapi.c	7;"	d
lapi_h	lapi.h	8;"	d
lastfree	lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastline	llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState
lastlinedefined	lobject.h	/^  int lastlinedefined;$/;"	m	struct:Proto
lastlinedefined	lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f
lasttarget	lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState
lauxlib_c	lauxlib.c	7;"	d
lauxlib_h	lauxlib.h	9;"	d
lbaselib_c	lbaselib.c	7;"	d
lbitlib_c	lbitlib.c	7;"	d
lcode_c	lcode.c	7;"	d
lcode_h	lcode.h	8;"	d
lcorolib_c	lcorolib.c	7;"	d
lctype_c	lctype.c	7;"	d
lctype_h	lctype.h	8;"	d
ldblib_c	ldblib.c	7;"	d
ldebug_c	ldebug.c	7;"	d
ldebug_h	ldebug.h	8;"	d
ldo_c	ldo.c	7;"	d
ldo_h	ldo.h	8;"	d
ldump_c	ldump.c	7;"	d
leaveblock	lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f
leavelevel	lparser.c	333;"	d
left	lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon3
len	lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata
len	lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon4
level	lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState
lexerror	llex.c	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f
lfunc_c	lfunc.c	7;"	d
lfunc_h	lfunc.h	8;"	d
lgc_c	lgc.c	7;"	d
lgc_h	lgc.h	8;"	d
libsize	lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f
line	lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc
linedefined	lobject.h	/^  int linedefined;$/;"	m	struct:Proto
linedefined	lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:Proto
linenumber	llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
linit_c	linit.c	8;"	d
linkgclist	lgc.c	113;"	d
liolib_c	liolib.c	7;"	d
lisdigit	lctype.h	59;"	d
lisdigit	lctype.h	85;"	d
lislalnum	lctype.h	58;"	d
lislalnum	lctype.h	84;"	d
lislalpha	lctype.h	57;"	d
lislalpha	lctype.h	83;"	d
lisprint	lctype.h	61;"	d
lisprint	lctype.h	87;"	d
lisspace	lctype.h	60;"	d
lisspace	lctype.h	86;"	d
listfield	lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f
listing	luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v
lisxdigit	lctype.h	62;"	d
lisxdigit	lctype.h	88;"	d
little	lstrlib.c	/^  char little;  \/* true iff machine is little endian *\/$/;"	m	union:__anon5
ll_funcs	loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v
ll_loadlib	loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f
ll_module	loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f
ll_require	loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f
ll_searchpath	loadlib.c	/^static int ll_searchpath (lua_State *L) {$/;"	f
ll_seeall	loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f
llex	llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f
llex_c	llex.c	7;"	d
llex_h	llex.h	8;"	d
llimits_h	llimits.h	8;"	d
lmathlib_c	lmathlib.c	7;"	d
lmem_c	lmem.c	7;"	d
lmem_h	lmem.h	8;"	d
lmemfind	lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f
lmod	lobject.h	518;"	d
lnglen	lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anon8
load_aux	lbaselib.c	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f
loadedlibs	linit.c	/^static const luaL_Reg loadedlibs[] = {$/;"	v
loadfunc	loadlib.c	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f
loadlib_c	loadlib.c	11;"	d
loadline	lua.c	/^static int loadline (lua_State *L) {$/;"	f
lobject_c	lobject.c	7;"	d
lobject_h	lobject.h	9;"	d
localfunc	lparser.c	/^static void localfunc (LexState *ls) {$/;"	f
localstat	lparser.c	/^static void localstat (LexState *ls) {$/;"	f
locvars	lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto
lookahead	llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookforfunc	loadlib.c	/^static int lookforfunc (lua_State *L, const char *path, const char *sym) {$/;"	f
lopcodes_c	lopcodes.c	7;"	d
lopcodes_h	lopcodes.h	8;"	d
loslib_c	loslib.c	7;"	d
lparser_c	lparser.c	7;"	d
lparser_h	lparser.h	8;"	d
lprefix_h	lprefix.h	8;"	d
ls	lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsizenode	lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table
lstate_c	lstate.c	7;"	d
lstate_h	lstate.h	8;"	d
lstop	lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f
lstring_c	lstring.c	7;"	d
lstring_h	lstring.h	8;"	d
lstrlib_c	lstrlib.c	7;"	d
lsys_load	loadlib.c	/^static void *lsys_load (lua_State *L, const char *path, int seeglb) {$/;"	f
lsys_sym	loadlib.c	/^static lua_CFunction lsys_sym (lua_State *L, void *lib, const char *sym) {$/;"	f
lsys_unloadlib	loadlib.c	/^static void lsys_unloadlib (void *lib) {$/;"	f
ltable_c	ltable.c	7;"	d
ltable_h	ltable.h	8;"	d
ltablib_c	ltablib.c	7;"	d
ltm_c	ltm.c	7;"	d
ltm_h	ltm.h	8;"	d
ltolower	lctype.h	67;"	d
ltolower	lctype.h	90;"	d
lu_byte	llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_mem	llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
lu_mem	llimits.h	/^typedef size_t lu_mem;$/;"	t
lu_mem	llimits.h	/^typedef unsigned long lu_mem;$/;"	t
luaB_assert	lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f
luaB_auxwrap	lcorolib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f
luaB_cocreate	lcorolib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f
luaB_collectgarbage	lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f
luaB_coresume	lcorolib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f
luaB_corunning	lcorolib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f
luaB_costatus	lcorolib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f
luaB_cowrap	lcorolib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f
luaB_dofile	lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f
luaB_error	lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f
luaB_getmetatable	lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f
luaB_ipairs	lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f
luaB_load	lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f
luaB_loadfile	lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f
luaB_next	lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f
luaB_pairs	lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f
luaB_pcall	lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f
luaB_print	lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f
luaB_rawequal	lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f
luaB_rawget	lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f
luaB_rawlen	lbaselib.c	/^static int luaB_rawlen (lua_State *L) {$/;"	f
luaB_rawset	lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f
luaB_select	lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f
luaB_setmetatable	lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f
luaB_tonumber	lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f
luaB_tostring	lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f
luaB_type	lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f
luaB_xpcall	lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f
luaB_yield	lcorolib.c	/^static int luaB_yield (lua_State *L) {$/;"	f
luaB_yieldable	lcorolib.c	/^static int luaB_yieldable (lua_State *L) {$/;"	f
luaC_barrier	lgc.h	109;"	d
luaC_barrier_	lgc.c	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barrierback	lgc.h	113;"	d
luaC_barrierback_	lgc.c	/^void luaC_barrierback_ (lua_State *L, Table *t) {$/;"	f
luaC_checkGC	lgc.h	106;"	d
luaC_checkfinalizer	lgc.c	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f
luaC_condGC	lgc.h	104;"	d
luaC_fix	lgc.c	/^void luaC_fix (lua_State *L, GCObject *o) {$/;"	f
luaC_freeallobjects	lgc.c	/^void luaC_freeallobjects (lua_State *L) {$/;"	f
luaC_fullgc	lgc.c	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f
luaC_newobj	lgc.c	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {$/;"	f
luaC_objbarrier	lgc.h	117;"	d
luaC_runtilstate	lgc.c	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f
luaC_step	lgc.c	/^void luaC_step (lua_State *L) {$/;"	f
luaC_upvalbarrier	lgc.h	121;"	d
luaC_upvalbarrier_	lgc.c	/^void luaC_upvalbarrier_ (lua_State *L, UpVal *uv) {$/;"	f
luaC_upvdeccount	lgc.c	/^void luaC_upvdeccount (lua_State *L, UpVal *uv) {$/;"	f
luaC_white	lgc.h	101;"	d
luaD_call	ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults, int allowyield) {$/;"	f
luaD_checkstack	ldo.h	16;"	d
luaD_growstack	ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_hook	ldo.c	/^void luaD_hook (lua_State *L, int event, int line) {$/;"	f
luaD_pcall	ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	ldo.c	/^int luaD_poscall (lua_State *L, StkId firstResult, int nres) {$/;"	f
luaD_precall	ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f
luaD_rawrunprotected	ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocstack	ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_shrinkstack	ldo.c	/^void luaD_shrinkstack (lua_State *L) {$/;"	f
luaD_throw	ldo.c	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_extendCI	lstate.c	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f
luaE_freeCI	lstate.c	/^void luaE_freeCI (lua_State *L) {$/;"	f
luaE_freethread	lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_setdebt	lstate.c	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f
luaE_shrinkCI	lstate.c	/^void luaE_shrinkCI (lua_State *L) {$/;"	f
luaF_close	lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeproto	lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_getlocalname	lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f
luaF_initupvals	lfunc.c	/^void luaF_initupvals (lua_State *L, LClosure *cl) {$/;"	f
luaF_newCclosure	lfunc.c	/^CClosure *luaF_newCclosure (lua_State *L, int n) {$/;"	f
luaF_newLclosure	lfunc.c	/^LClosure *luaF_newLclosure (lua_State *L, int n) {$/;"	f
luaF_newproto	lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f
luaG_addinfo	ldebug.c	/^const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,$/;"	f
luaG_concaterror	ldebug.c	/^l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_errormsg	ldebug.c	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f
luaG_opinterror	ldebug.c	/^l_noret luaG_opinterror (lua_State *L, const TValue *p1,$/;"	f
luaG_ordererror	ldebug.c	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	ldebug.c	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_tointerror	ldebug.c	/^l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_traceexec	ldebug.c	/^void luaG_traceexec (lua_State *L) {$/;"	f
luaG_typeerror	ldebug.c	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getint	ltable.c	/^const TValue *luaH_getint (Table *t, lua_Integer key) {$/;"	f
luaH_getn	ltable.c	/^int luaH_getn (Table *t) {$/;"	f
luaH_getstr	ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	ltable.c	/^int luaH_isdummy (Node *n) { return isdummy(n); }$/;"	f
luaH_mainposition	ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	ltable.c	/^Table *luaH_new (lua_State *L) {$/;"	f
luaH_newkey	ltable.c	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_next	ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resize	ltable.c	/^void luaH_resize (lua_State *L, Table *t, unsigned int nasize,$/;"	f
luaH_resizearray	ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {$/;"	f
luaH_set	ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setint	ltable.c	/^void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {$/;"	f
luaK_checkstack	lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	lcode.c	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f
luaK_codeABC	lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	lcode.h	45;"	d
luaK_codek	lcode.c	/^int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f
luaK_concat	lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyregup	lcode.c	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	lcode.c	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f
luaK_goiftrue	lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_intK	lcode.c	/^int luaK_intK (FuncState *fs, lua_Integer n) {$/;"	f
luaK_jump	lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_jumpto	lcode.h	49;"	d
luaK_nil	lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	lcode.c	/^static int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f
luaK_patchclose	lcode.c	/^void luaK_patchclose (FuncState *fs, int list, int level) {$/;"	f
luaK_patchlist	lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op,$/;"	f
luaK_prefix	lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f
luaK_reserveregs	lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	lcode.h	47;"	d
luaK_setoneret	lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Stream	lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	lauxlib.h	149;"	d
luaL_addlstring	lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addsize	lauxlib.h	153;"	d
luaL_addstring	lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addvalue	lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_argcheck	lauxlib.h	114;"	d
luaL_argerror	lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {$/;"	f
luaL_buffinit	lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_buffinitsize	lauxlib.c	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f
luaL_callmeta	lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int arg) {$/;"	f
luaL_checkint	lauxlib.h	243;"	d
luaL_checkinteger	lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {$/;"	f
luaL_checklong	lauxlib.h	246;"	d
luaL_checklstring	lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {$/;"	f
luaL_checknumber	lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {$/;"	f
luaL_checkoption	lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,$/;"	f
luaL_checkstack	lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f
luaL_checkstring	lauxlib.h	116;"	d
luaL_checktype	lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {$/;"	f
luaL_checkudata	lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_checkunsigned	lauxlib.h	239;"	d
luaL_checkversion	lauxlib.h	32;"	d
luaL_checkversion_	lauxlib.c	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {$/;"	f
luaL_dofile	lauxlib.h	121;"	d
luaL_dostring	lauxlib.h	124;"	d
luaL_error	lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_execresult	lauxlib.c	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f
luaL_fileresult	lauxlib.c	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f
luaL_findtable	lauxlib.c	/^static const char *luaL_findtable (lua_State *L, int idx,$/;"	f
luaL_getmetafield	lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	lauxlib.h	127;"	d
luaL_getsubtable	lauxlib.c	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f
luaL_gsub	lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_len	lauxlib.c	/^LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {$/;"	f
luaL_loadbuffer	lauxlib.h	131;"	d
luaL_loadbufferx	lauxlib.c	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadfile	lauxlib.h	78;"	d
luaL_loadfilex	lauxlib.c	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f
luaL_loadstring	lauxlib.c	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f
luaL_newlib	lauxlib.h	111;"	d
luaL_newlibtable	lauxlib.h	108;"	d
luaL_newmetatable	lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_openlib	lauxlib.c	/^LUALIB_API void luaL_openlib (lua_State *L, const char *libname,$/;"	f
luaL_openlibs	linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	lauxlib.h	129;"	d
luaL_optint	lauxlib.h	244;"	d
luaL_optinteger	lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,$/;"	f
luaL_optlong	lauxlib.h	247;"	d
luaL_optlstring	lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,$/;"	f
luaL_optnumber	lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {$/;"	f
luaL_optstring	lauxlib.h	117;"	d
luaL_optunsigned	lauxlib.h	240;"	d
luaL_prepbuffer	lauxlib.h	164;"	d
luaL_prepbuffsize	lauxlib.c	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_pushmodule	lauxlib.c	/^LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,$/;"	f
luaL_pushresult	lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_pushresultsize	lauxlib.c	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_ref	lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_register	lauxlib.h	202;"	d
luaL_requiref	lauxlib.c	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f
luaL_setfuncs	lauxlib.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setmetatable	lauxlib.c	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_testudata	lauxlib.c	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_tolstring	lauxlib.c	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
luaL_traceback	lauxlib.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f
luaL_typename	lauxlib.h	119;"	d
luaL_unref	lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaM_free	lmem.h	42;"	d
luaM_freearray	lmem.h	43;"	d
luaM_freemem	lmem.h	41;"	d
luaM_growaux_	lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	lmem.h	52;"	d
luaM_malloc	lmem.h	45;"	d
luaM_new	lmem.h	46;"	d
luaM_newobject	lmem.h	50;"	d
luaM_newvector	lmem.h	47;"	d
luaM_realloc_	lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	lmem.h	30;"	d
luaM_reallocvchar	lmem.h	38;"	d
luaM_reallocvector	lmem.h	56;"	d
luaM_toobig	lmem.c	/^l_noret luaM_toobig (lua_State *L) {$/;"	f
luaO_arith	lobject.c	/^void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f
luaO_ceillog2	lobject.c	/^int luaO_ceillog2 (unsigned int x) {$/;"	f
luaO_chunkid	lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	lobject.c	/^int luaO_fb2int (int x) {$/;"	f
luaO_hexavalue	lobject.c	/^int luaO_hexavalue (int c) {$/;"	f
luaO_int2fb	lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_nilobject	lobject.h	529;"	d
luaO_nilobject_	lobject.c	/^LUAI_DDEF const TValue luaO_nilobject_ = {NILCONSTANT};$/;"	v
luaO_nilobject_	lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_str2num	lobject.c	/^size_t luaO_str2num (const char *s, TValue *o) {$/;"	f
luaO_tostring	lobject.c	/^void luaO_tostring (lua_State *L, StkId obj) {$/;"	f
luaO_utf8esc	lobject.c	/^int luaO_utf8esc (char *buff, unsigned long x) {$/;"	f
luaP_opmodes	lopcodes.c	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	lopcodes.c	/^LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_clearcache	lstring.c	/^void luaS_clearcache (global_State *g) {$/;"	f
luaS_eqlngstr	lstring.c	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f
luaS_hash	lstring.c	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f
luaS_init	lstring.c	/^void luaS_init (lua_State *L) {$/;"	f
luaS_new	lstring.c	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f
luaS_newliteral	lstring.h	20;"	d
luaS_newlstr	lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s) {$/;"	f
luaS_remove	lstring.c	/^void luaS_remove (lua_State *L, TString *ts) {$/;"	f
luaS_resize	lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaT_callTM	ltm.c	/^void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f
luaT_callbinTM	ltm.c	/^int luaT_callbinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_callorderTM	ltm.c	/^int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_gettm	ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	ltm.c	/^void luaT_init (lua_State *L) {$/;"	f
luaT_trybinTM	ltm.c	/^void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_typenames_	ltm.c	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v
luaT_typenames_	ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v
luaU_dump	ldump.c	/^int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,$/;"	f
luaU_print	luac.c	26;"	d
luaU_undump	lundump.c	/^LClosure *luaU_undump(lua_State *L, ZIO *Z, Mbuffer *buff,$/;"	f
luaV_concat	lvm.c	/^void luaV_concat (lua_State *L, int total) {$/;"	f
luaV_div	lvm.c	/^lua_Integer luaV_div (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_equalobj	lvm.c	/^int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	lvm.c	/^void luaV_execute (lua_State *L) {$/;"	f
luaV_finishOp	lvm.c	/^void luaV_finishOp (lua_State *L) {$/;"	f
luaV_gettable	lvm.c	/^void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_lessequal	lvm.c	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_lessthan	lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_mod	lvm.c	/^lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_objlen	lvm.c	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f
luaV_rawequalobj	lvm.h	48;"	d
luaV_settable	lvm.c	/^void luaV_settable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_shiftl	lvm.c	/^lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {$/;"	f
luaV_tointeger	lvm.c	/^int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {$/;"	f
luaV_tonumber_	lvm.c	/^int luaV_tonumber_ (const TValue *obj, lua_Number *n) {$/;"	f
luaX_init	llex.c	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lookahead	llex.c	/^int luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	llex.c	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f
luaX_syntaxerror	llex.c	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	llex.c	/^static const char *const luaX_tokens [] = {$/;"	v
luaY_parser	lparser.c	/^LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f
luaZ_buffer	lzio.h	31;"	d
luaZ_bufflen	lzio.h	33;"	d
luaZ_buffremove	lzio.h	35;"	d
luaZ_fill	lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	lzio.h	44;"	d
luaZ_init	lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	lzio.h	29;"	d
luaZ_openspace	lzio.c	/^char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n) {$/;"	f
luaZ_read	lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	lzio.h	36;"	d
luaZ_resizebuffer	lzio.h	39;"	d
luaZ_sizebuffer	lzio.h	32;"	d
lua_Alloc	lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Debug	lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_KContext	lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KFunction	lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_Number	lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	lstate.h	/^struct lua_State {$/;"	s
lua_State	lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	lobject.h	/^struct lua_TValue {$/;"	s
lua_Unsigned	lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t
lua_Writer	lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t
lua_absindex	lapi.c	/^LUA_API int lua_absindex (lua_State *L, int idx) {$/;"	f
lua_arith	lapi.c	/^LUA_API void lua_arith (lua_State *L, int op) {$/;"	f
lua_assert	llimits.h	83;"	d
lua_assert	lualib.h	54;"	d
lua_atpanic	lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_c	lua.c	7;"	d
lua_call	lua.h	274;"	d
lua_callk	lapi.c	/^LUA_API void lua_callk (lua_State *L, int nargs, int nresults,$/;"	f
lua_checkstack	lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int n) {$/;"	f
lua_close	lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_compare	lapi.c	/^LUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f
lua_concat	lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f
lua_copy	lapi.c	/^LUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f
lua_cpcall	luaconf.h	341;"	d
lua_createtable	lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_dump	lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {$/;"	f
lua_equal	luaconf.h	373;"	d
lua_error	lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f
lua_freeline	lua.c	84;"	d
lua_freeline	lua.c	92;"	d
lua_gc	lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getextraspace	lua.h	339;"	d
lua_getfield	lapi.c	/^LUA_API int lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getglobal	lapi.c	/^LUA_API int lua_getglobal (lua_State *L, const char *name) {$/;"	f
lua_gethook	ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f
lua_geti	lapi.c	/^LUA_API int lua_geti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_getinfo	ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getlocaledecpoint	luaconf.h	640;"	d
lua_getmetatable	lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getstack	ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	lapi.c	/^LUA_API int lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_getuservalue	lapi.c	/^LUA_API int lua_getuservalue (lua_State *L, int idx) {$/;"	f
lua_h	lua.h	10;"	d
lua_ident	lapi.c	/^const char lua_ident[] =$/;"	v
lua_insert	lua.h	369;"	d
lua_integer2str	luaconf.h	509;"	d
lua_isboolean	lua.h	356;"	d
lua_iscfunction	lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	lua.h	352;"	d
lua_isinteger	lapi.c	/^LUA_API int lua_isinteger (lua_State *L, int idx) {$/;"	f
lua_islightuserdata	lua.h	354;"	d
lua_isnil	lua.h	355;"	d
lua_isnone	lua.h	358;"	d
lua_isnoneornil	lua.h	359;"	d
lua_isnumber	lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	lua.h	353;"	d
lua_isthread	lua.h	357;"	d
lua_isuserdata	lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_isyieldable	ldo.c	/^LUA_API int lua_isyieldable (lua_State *L) {$/;"	f
lua_len	lapi.c	/^LUA_API void lua_len (lua_State *L, int idx) {$/;"	f
lua_lessthan	luaconf.h	374;"	d
lua_load	lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	llimits.h	205;"	d
lua_longassert	llimits.h	81;"	d
lua_longassert	llimits.h	85;"	d
lua_longjmp	ldo.c	/^struct lua_longjmp {$/;"	s
lua_newstate	lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	lua.h	346;"	d
lua_newthread	lstate.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2str	luaconf.h	473;"	d
lua_number2strx	lstrlib.c	/^static int lua_number2strx (lua_State *L, char *buff, const char *fmt,$/;"	f
lua_number2strx	luaconf.h	598;"	d
lua_numbertointeger	luaconf.h	484;"	d
lua_objlen	luaconf.h	371;"	d
lua_pcall	lua.h	278;"	d
lua_pcallk	lapi.c	/^LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f
lua_pop	lua.h	344;"	d
lua_pushboolean	lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	lua.h	350;"	d
lua_pushfstring	lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushglobaltable	lua.h	363;"	d
lua_pushinteger	lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	lua.h	361;"	d
lua_pushlstring	lapi.c	/^LUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	lapi.c	/^LUA_API const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f
lua_pushunsigned	lua.h	385;"	d
lua_pushvalue	lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_rawequal	lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	lapi.c	/^LUA_API int lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	lapi.c	/^LUA_API int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawgetp	lapi.c	/^LUA_API int lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_rawlen	lapi.c	/^LUA_API size_t lua_rawlen (lua_State *L, int idx) {$/;"	f
lua_rawset	lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawsetp	lapi.c	/^LUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_readline	lua.c	82;"	d
lua_readline	lua.c	88;"	d
lua_register	lua.h	348;"	d
lua_remove	lua.h	371;"	d
lua_replace	lua.h	373;"	d
lua_resume	ldo.c	/^LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs) {$/;"	f
lua_rotate	lapi.c	/^LUA_API void lua_rotate (lua_State *L, int idx, int n) {$/;"	f
lua_saveline	lua.c	83;"	d
lua_saveline	lua.c	91;"	d
lua_setallocf	lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfield	lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	lapi.c	/^LUA_API void lua_setglobal (lua_State *L, const char *name) {$/;"	f
lua_sethook	ldebug.c	/^LUA_API void lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_seti	lapi.c	/^LUA_API void lua_seti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_setlocal	ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_setuservalue	lapi.c	/^LUA_API void lua_setuservalue (lua_State *L, int idx) {$/;"	f
lua_status	lapi.c	/^LUA_API int lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	lua.c	53;"	d
lua_stdin_is_tty	lua.c	58;"	d
lua_stdin_is_tty	lua.c	63;"	d
lua_str2number	luaconf.h	431;"	d
lua_str2number	luaconf.h	447;"	d
lua_str2number	luaconf.h	462;"	d
lua_str2number	luaconf.h	610;"	d
lua_str2number	luaconf.h	612;"	d
lua_stringtonumber	lapi.c	/^LUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {$/;"	f
lua_strlen	luaconf.h	369;"	d
lua_strx2number	lobject.c	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f
lua_strx2number	luaconf.h	587;"	d
lua_tmpnam	loslib.c	105;"	d
lua_tmpnam	loslib.c	115;"	d
lua_toboolean	lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	lua.h	342;"	d
lua_tointegerx	lapi.c	/^LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_tolstring	lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	lua.h	341;"	d
lua_tonumberx	lapi.c	/^LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_topointer	lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	lua.h	366;"	d
lua_tothread	lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_tounsigned	lua.h	387;"	d
lua_tounsignedx	lua.h	386;"	d
lua_touserdata	lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f
lua_typename	lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	llimits.h	206;"	d
lua_upvalueid	lapi.c	/^LUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f
lua_upvalueindex	lua.h	43;"	d
lua_upvaluejoin	lapi.c	/^LUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f
lua_version	lapi.c	/^LUA_API const lua_Number *lua_version (lua_State *L) {$/;"	f
lua_writeline	lauxlib.h	220;"	d
lua_writestring	lauxlib.h	215;"	d
lua_writestringerror	lauxlib.h	225;"	d
lua_xmove	lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	lua.h	295;"	d
lua_yieldk	ldo.c	/^LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,$/;"	f
luac_c	luac.c	217;"	d
luac_c	luac.c	7;"	d
luaconf_h	luaconf.h	9;"	d
luai_apicheck	llimits.h	92;"	d
luai_apicheck	luaconf.h	668;"	d
luai_ctype_	lctype.c	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v
luai_ctype_	lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v
luai_jmpbuf	ldo.c	61;"	d
luai_jmpbuf	ldo.c	68;"	d
luai_jmpbuf	ldo.c	75;"	d
luai_makeseed	lstate.c	46;"	d
luai_numadd	llimits.h	282;"	d
luai_numdiv	llimits.h	260;"	d
luai_numeq	llimits.h	286;"	d
luai_numidiv	llimits.h	255;"	d
luai_numisnan	llimits.h	289;"	d
luai_numle	llimits.h	288;"	d
luai_numlt	llimits.h	287;"	d
luai_nummod	llimits.h	271;"	d
luai_nummul	llimits.h	284;"	d
luai_numpow	llimits.h	277;"	d
luai_numsub	llimits.h	283;"	d
luai_numunm	llimits.h	285;"	d
luai_runtimecheck	lvm.c	704;"	d
luai_threadyield	llimits.h	214;"	d
luai_userstateclose	llimits.h	228;"	d
luai_userstatefree	llimits.h	236;"	d
luai_userstateopen	llimits.h	224;"	d
luai_userstateresume	llimits.h	240;"	d
luai_userstatethread	llimits.h	232;"	d
luai_userstateyield	llimits.h	244;"	d
luai_verifycode	lundump.c	28;"	d
lualib_h	lualib.h	9;"	d
luaopen_base	lbaselib.c	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_bit32	lbitlib.c	/^LUAMOD_API int luaopen_bit32 (lua_State *L) {$/;"	f
luaopen_coroutine	lcorolib.c	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f
luaopen_debug	ldblib.c	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_io	liolib.c	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_math	lmathlib.c	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_os	loslib.c	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	loadlib.c	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_string	lstrlib.c	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_table	ltablib.c	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f
luaopen_utf8	lutf8lib.c	/^LUAMOD_API int luaopen_utf8 (lua_State *L) {$/;"	f
lundump_c	lundump.c	7;"	d
lundump_h	lundump.h	8;"	d
lutf8lib_c	lutf8lib.c	7;"	d
lvm_c	lvm.c	7;"	d
lvm_h	lvm.h	8;"	d
lzio_c	lzio.c	7;"	d
lzio_h	lzio.h	9;"	d
main	lua.c	/^int main (int argc, char **argv) {$/;"	f
main	luac.c	/^int main(int argc, char* argv[])$/;"	f
mainfunc	lparser.c	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f
mainposition	ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f
mainthread	lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
makemask	ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f
makeseed	lstate.c	/^static unsigned int makeseed (lua_State *L) {$/;"	f
makewhite	lgc.c	67;"	d
markbeingfnz	lgc.c	/^static void markbeingfnz (global_State *g) {$/;"	f
marklen	lua.c	281;"	d
markmt	lgc.c	/^static void markmt (global_State *g) {$/;"	f
markobject	lgc.c	86;"	d
markobjectN	lgc.c	92;"	d
markupval	lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f
markvalue	lgc.c	83;"	d
mask	lbitlib.c	41;"	d
maskcolors	lgc.c	66;"	d
match	lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f
match_capture	lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f
match_class	lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f
matchbalance	lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f
matchbracketclass	lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f
matchdepth	lstrlib.c	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState
math_abs	lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f
math_acos	lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f
math_asin	lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f
math_atan	lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f
math_ceil	lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f
math_cos	lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f
math_cosh	lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f
math_deg	lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f
math_exp	lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f
math_floor	lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f
math_fmod	lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f
math_frexp	lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f
math_ldexp	lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f
math_log	lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f
math_log10	lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f
math_max	lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f
math_min	lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f
math_modf	lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f
math_pow	lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f
math_rad	lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f
math_random	lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f
math_randomseed	lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f
math_sin	lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f
math_sinh	lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f
math_sqrt	lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f
math_tan	lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f
math_tanh	lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f
math_toint	lmathlib.c	/^static int math_toint (lua_State *L) {$/;"	f
math_type	lmathlib.c	/^static int math_type (lua_State *L) {$/;"	f
math_ult	lmathlib.c	/^static int math_ult (lua_State *L) {$/;"	f
mathlib	lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v
max_expand	lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f
maxalign	lstrlib.c	/^  int maxalign;$/;"	m	struct:Header
maxn	ltablib.c	/^static int maxn (lua_State *L) {$/;"	f
maxstacksize	lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto
memerrmsg	lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State
metatable	lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
metatable	lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Udata::Table
min_expand	lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f
mode	ldo.c	/^  const char *mode;$/;"	m	struct:SParser
modinit	loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f
movegotosout	lparser.c	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f
msghandler	lua.c	/^static int msghandler (lua_State *L) {$/;"	f
mt	lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
multiline	lua.c	/^static int multiline (lua_State *L) {$/;"	f
n	lauxlib.c	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF
n	lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer
n	liolib.c	/^  int n;  \/* number of elements in buffer 'buff' *\/$/;"	m	struct:__anon15
n	lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value
n	lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon13
n	lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist
n	lstrlib.c	/^  lua_Number n;$/;"	m	union:Ftypes
n	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon6
n	lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
nCcalls	lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
na	lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl
nactvar	lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt
nactvar	lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc
nactvar	lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	ldo.c	/^  const char *name;$/;"	m	struct:SParser
name	lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc
name	lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc
name	lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	lundump.c	/^  const char *name;$/;"	m	struct:__anon16
namewhat	lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug
nativeendian	lstrlib.c	/^} nativeendian = {1};$/;"	v	typeref:union:__anon5
need_value	lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f
new_localvar	lparser.c	/^static void new_localvar (LexState *ls, TString *name) {$/;"	f
new_localvarliteral	lparser.c	190;"	d
new_localvarliteral_	lparser.c	/^static void new_localvarliteral_ (LexState *ls, const char *name, size_t sz) {$/;"	f
newfile	liolib.c	/^static LStream *newfile (lua_State *L) {$/;"	f
newlabelentry	lparser.c	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f
newprefile	liolib.c	/^static LStream *newprefile (lua_State *L) {$/;"	f
newupvalue	lparser.c	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f
next	lfunc.h	/^      UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon1::__anon2
next	llex.c	32;"	d
next	lobject.h	/^    int next;  \/* for chaining (offset for next node) *\/$/;"	m	struct:TKey::__anon9
next	lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::
next_ci	ldo.c	308;"	d
nextc	liolib.c	/^static int nextc (RN *rn) {$/;"	f
nh	lparser.c	/^  int nh;  \/* total number of 'record' elements *\/$/;"	m	struct:ConsControl
nilK	lcode.c	/^static int nilK (FuncState *fs) {$/;"	f
nk	lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon9
nk	lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState
nlocvars	lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState
nny	lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State
noLuaClosure	ldebug.c	34;"	d
node	lobject.h	/^  Node *node;$/;"	m	struct:Table
noenv	loadlib.c	/^static int noenv (lua_State *L) {$/;"	f
nospecials	lstrlib.c	/^static int nospecials (const char *p, size_t l) {$/;"	f
novariant	lobject.h	120;"	d
np	lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState
nparams	lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug
nresults	lapi.c	/^  int nresults;$/;"	m	struct:CallS
nresults	lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
num2straux	lstrlib.c	/^static int num2straux (char *buff, lua_Number x) {$/;"	f
numarith	lobject.c	/^static lua_Number numarith (lua_State *L, int op, lua_Number v1,$/;"	f
numparams	lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:Proto
numusearray	ltable.c	/^static unsigned int numusearray (const Table *t, unsigned int *nums) {$/;"	f
numusehash	ltable.c	/^static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {$/;"	f
nups	lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState
nups	lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anon11
nvalue	lobject.h	155;"	d
obj2gco	lstate.h	210;"	d
objtypename	ltm.h	54;"	d
old_errfunc	lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anon20::__anon22
oldpc	lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State
open	lfunc.h	/^    } open;$/;"	m	union:UpVal::__anon1	typeref:struct:UpVal::__anon1::__anon2
open_func	lparser.c	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f
opencheck	liolib.c	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f
openupval	lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
opmode	lopcodes.c	72;"	d
os_clock	loslib.c	/^static int os_clock (lua_State *L) {$/;"	f
os_date	loslib.c	/^static int os_date (lua_State *L) {$/;"	f
os_difftime	loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f
os_execute	loslib.c	/^static int os_execute (lua_State *L) {$/;"	f
os_exit	loslib.c	/^static int os_exit (lua_State *L) {$/;"	f
os_getenv	loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f
os_remove	loslib.c	/^static int os_remove (lua_State *L) {$/;"	f
os_rename	loslib.c	/^static int os_rename (lua_State *L) {$/;"	f
os_setlocale	loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f
os_time	loslib.c	/^static int os_time (lua_State *L) {$/;"	f
os_tmpname	loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f
otherwhite	lgc.h	94;"	d
output	luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v
p	lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value
p	lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Proto
p	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon6
p	lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p_end	lstrlib.c	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState
pack	ltablib.c	/^static int pack (lua_State *L) {$/;"	f
packint	lstrlib.c	/^static void packint (luaL_Buffer *b, lua_Unsigned n,$/;"	f
pairsmeta	lbaselib.c	/^static int pairsmeta (lua_State *L, const char *method, int iszero,$/;"	f
panic	lauxlib.c	/^static int panic (lua_State *L) {$/;"	f
panic	lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
parlist	lparser.c	/^static void parlist (LexState *ls) {$/;"	f
patchlistaux	lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f
patchtestreg	lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f
pc	lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState
pc	lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc
pcRel	ldebug.h	14;"	d
pk_funcs	loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v
pmain	lua.c	/^static int pmain (lua_State *L) {$/;"	f
pmain	luac.c	/^static int pmain(lua_State* L)$/;"	f
point2uint	llimits.h	59;"	d
posrelat	lstrlib.c	/^static lua_Integer posrelat (lua_Integer pos, size_t len) {$/;"	f
preinit_thread	lstate.c	/^static void preinit_thread (lua_State *L, global_State *g) {$/;"	f
prev	lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign
prev	lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
previous	ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp
previous	lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt
previous	lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::CallInfo
primaryexp	lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f
print_usage	lua.c	/^static void print_usage (const char *badoption) {$/;"	f
print_version	lua.c	/^static void print_version (void) {$/;"	f
priority	lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon3
progname	lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v
progname	luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v
propagateall	lgc.c	/^static void propagateall (global_State *g) {$/;"	f
propagatemark	lgc.c	/^static void propagatemark (global_State *g) {$/;"	f
push_captures	lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f
push_onecapture	lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f
pushargs	lua.c	/^static int pushargs (lua_State *L) {$/;"	f
pushclosure	lvm.c	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f
pusherror	loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f
pushfuncname	lauxlib.c	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f
pushglobalfuncname	lauxlib.c	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f
pushline	lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f
pushnexttemplate	loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f
pushnumint	lmathlib.c	/^static void pushnumint (lua_State *L, lua_Number d) {$/;"	f
pushstr	lobject.c	/^static void pushstr (lua_State *L, const char *str, size_t l) {$/;"	f
pushutfchar	lutf8lib.c	/^static void pushutfchar (lua_State *L, int arg) {$/;"	f
pvalue	lobject.h	158;"	d
r	llex.h	/^  lua_Number r;$/;"	m	union:__anon18
read_all	liolib.c	/^static void read_all (lua_State *L, FILE *f) {$/;"	f
read_chars	liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f
read_line	liolib.c	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f
read_long_string	llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f
read_number	liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f
read_numeral	llex.c	/^static int read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f
read_string	llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f
readable	loadlib.c	/^static int readable (const char *filename) {$/;"	f
readdecesc	llex.c	/^static int readdecesc (LexState *ls) {$/;"	f
readdigits	liolib.c	/^static int readdigits (RN *rn, int hex) {$/;"	f
reader	luac.c	/^static const char* reader(lua_State *L, void *ud, size_t *size)$/;"	f
reader	lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio
readhexaesc	llex.c	/^static int readhexaesc (LexState *ls) {$/;"	f
readutf8esc	llex.c	/^static unsigned long readutf8esc (LexState *ls) {$/;"	f
reallymarkobject	lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f
recfield	lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f
recover	ldo.c	/^static int recover (lua_State *L, int status) {$/;"	f
refcount	lfunc.h	/^  lu_mem refcount;  \/* reference counter *\/$/;"	m	struct:UpVal
registerlocalvar	lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f
rehash	ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f
remarkupvals	lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f
removeentry	lgc.c	/^static void removeentry (Node *n) {$/;"	f
removevalues	lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f
removevars	lparser.c	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f
repeatstat	lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f
report	lua.c	/^static int report (lua_State *L, int status) {$/;"	f
resetbit	lgc.h	73;"	d
resetbits	lgc.h	67;"	d
resethookcount	ldebug.h	18;"	d
restartcollection	lgc.c	/^static void restartcollection (global_State *g) {$/;"	f
restorestack	ldo.h	23;"	d
resume	ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f
resume_error	ldo.c	/^static l_noret resume_error (lua_State *L, const char *msg, StkId firstArg) {$/;"	f
retstat	lparser.c	/^static void retstat (LexState *ls) {$/;"	f
reverse	lapi.c	/^static void reverse (lua_State *L, StkId from, StkId to) {$/;"	f
right	lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon3
righttt	lobject.h	178;"	d
rttype	lobject.h	117;"	d
runafewfinalizers	lgc.c	/^static int runafewfinalizers (lua_State *L) {$/;"	f
runargs	lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f
s	lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS
s	llimits.h	/^typedef union { double u; void *s; lua_Integer i; long l; } L_Umaxalign;$/;"	m	union:__anon7
save	llex.c	/^static void save (LexState *ls, int c) {$/;"	f
save_and_next	llex.c	51;"	d
savedpc	lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anon20::__anon21
savestack	ldo.h	22;"	d
scanformat	lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f
searcher_C	loadlib.c	/^static int searcher_C (lua_State *L) {$/;"	f
searcher_Croot	loadlib.c	/^static int searcher_Croot (lua_State *L) {$/;"	f
searcher_Lua	loadlib.c	/^static int searcher_Lua (lua_State *L) {$/;"	f
searcher_preload	loadlib.c	/^static int searcher_preload (lua_State *L) {$/;"	f
searchpath	loadlib.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f
searchupvalue	lparser.c	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f
searchvar	lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f
seed	lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State
semerror	lparser.c	/^static l_noret semerror (LexState *ls, const char *msg) {$/;"	f
seminfo	llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
separatetobefnz	lgc.c	/^static void separatetobefnz (global_State *g, int all) {$/;"	f
set2	ltablib.c	/^static void set2 (lua_State *L, TabA *ta, int i, int j) {$/;"	f
set_env	loadlib.c	/^static void set_env (lua_State *L) {$/;"	f
setarg	lopcodes.h	94;"	d
setarrayvector	ltable.c	/^static void setarrayvector (lua_State *L, Table *t, unsigned int size) {$/;"	f
setbits	lgc.h	68;"	d
setboolfield	loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f
setbvalue	lobject.h	208;"	d
setclCvalue	lobject.h	235;"	d
setclLvalue	lobject.h	230;"	d
setdeadvalue	lobject.h	245;"	d
seterrorobj	ldo.c	/^static void seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f
setfield	loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f
setfltvalue	lobject.h	188;"	d
setfvalue	lobject.h	202;"	d
setgcovalue	lobject.h	211;"	d
sethvalue	lobject.h	240;"	d
sethvalue2s	lobject.h	263;"	d
seti	ltablib.c	/^  void (*seti) (lua_State *L, int idx, lua_Integer n);$/;"	m	struct:__anon14
setivalue	lobject.h	194;"	d
setnilvalue	lobject.h	200;"	d
setnodekey	lobject.h	489;"	d
setnodevector	ltable.c	/^static void setnodevector (lua_State *L, Table *t, unsigned int size) {$/;"	f
setoah	lstate.h	102;"	d
setobj	lobject.h	249;"	d
setobj2n	lobject.h	270;"	d
setobj2s	lobject.h	261;"	d
setobj2t	lobject.h	268;"	d
setobjs2s	lobject.h	259;"	d
setobjt2t	lobject.h	266;"	d
setpath	loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname1,$/;"	f
setpause	lgc.c	/^static void setpause (global_State *g) {$/;"	f
setprogdir	loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f
setprogdir	loadlib.c	182;"	d
setprogdir	loadlib.c	97;"	d
setptvalue2s	lobject.h	264;"	d
setpvalue	lobject.h	205;"	d
setsvalue	lobject.h	215;"	d
setsvalue2n	lobject.h	271;"	d
setsvalue2s	lobject.h	262;"	d
settabsb	ldblib.c	/^static void settabsb (lua_State *L, const char *k, int v) {$/;"	f
settabsi	ldblib.c	/^static void settabsi (lua_State *L, const char *k, int v) {$/;"	f
settabss	ldblib.c	/^static void settabss (lua_State *L, const char *k, const char *v) {$/;"	f
setthvalue	lobject.h	225;"	d
settt_	lobject.h	186;"	d
setuservalue	lobject.h	375;"	d
setuvalue	lobject.h	220;"	d
short_src	lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
shrlen	lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString
simpleexp	lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f
singlematch	lstrlib.c	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f
singlestep	lgc.c	/^static lu_mem singlestep (lua_State *L) {$/;"	f
singlevar	lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f
singlevaraux	lparser.c	/^static int singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f
size	lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS
size	lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer
size	lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon13
size	lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist
size	lstate.h	/^  int size;$/;"	m	struct:stringtable
sizeCclosure	lfunc.h	14;"	d
sizeLclosure	lfunc.h	17;"	d
sizearray	lobject.h	/^  unsigned int sizearray;  \/* size of 'array' array *\/$/;"	m	struct:Table
sizecode	lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizek	lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto
sizelineinfo	lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelocvars	lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizelstring	lstring.h	15;"	d
sizeludata	lstring.h	17;"	d
sizenode	lobject.h	523;"	d
sizep	lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto
sizeudata	lstring.h	18;"	d
sizeupvalues	lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto
skipBOM	lauxlib.c	/^static int skipBOM (LoadF *lf) {$/;"	f
skip_sep	llex.c	/^static int skip_sep (LexState *ls) {$/;"	f
skipcomment	lauxlib.c	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f
skipnoopstat	lparser.c	/^static void skipnoopstat (LexState *ls) {$/;"	f
sort	ltablib.c	/^static int sort (lua_State *L) {$/;"	f
sort_comp	ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f
source	llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto
source	lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
src_end	lstrlib.c	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState
src_init	lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState
stack	lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack_init	lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f
stack_last	lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stackinuse	ldo.c	/^static int stackinuse (lua_State *L) {$/;"	f
stacksize	lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
start_capture	lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f
startpc	lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
statement	lparser.c	/^static void statement (LexState *ls) {$/;"	f
statlist	lparser.c	/^static void statlist (LexState *ls) {$/;"	f
status	ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp
status	ldump.c	/^  int status;$/;"	m	struct:__anon17
status	lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
str_byte	lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f
str_char	lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f
str_checkname	lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f
str_dump	lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f
str_find	lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f
str_find_aux	lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f
str_format	lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f
str_gsub	lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f
str_len	lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f
str_lower	lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f
str_match	lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f
str_pack	lstrlib.c	/^static int str_pack (lua_State *L) {$/;"	f
str_packsize	lstrlib.c	/^static int str_packsize (lua_State *L) {$/;"	f
str_rep	lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f
str_reverse	lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f
str_sub	lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f
str_unpack	lstrlib.c	/^static int str_unpack (lua_State *L) {$/;"	f
str_upper	lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f
strcache	lstate.h	/^  TString *strcache[STRCACHE_SIZE][1];  \/* cache for strings in API *\/$/;"	m	struct:global_State
stringtable	lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	ldump.c	/^  int strip;$/;"	m	struct:__anon17
stripping	luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v
strlib	lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v
strt	lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
subexpr	lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f
suffixedexp	lparser.c	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f
svalue	lobject.h	337;"	d
swapextra	ldebug.c	/^static void swapextra (lua_State *L) {$/;"	f
sweepgc	lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State
sweeplist	lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f
sweepstep	lgc.c	/^static lu_mem sweepstep (lua_State *L, global_State *g,$/;"	f
sweeptolive	lgc.c	/^static GCObject **sweeptolive (lua_State *L, GCObject **p, int *n) {$/;"	f
sweepwholelist	lgc.c	717;"	d
syslib	loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v
t	llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl
t	lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon11::__anon12
t	lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc
tab_funcs	ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v
tag_error	lauxlib.c	/^static void tag_error (lua_State *L, int arg, int tag) {$/;"	f
tconcat	ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f
test2	liolib.c	/^static int test2 (RN *rn, const char *set) {$/;"	f
testAMode	lopcodes.h	284;"	d
testTMode	lopcodes.h	285;"	d
test_eof	liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f
test_then_block	lparser.c	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f
testbit	lgc.h	74;"	d
testbits	lgc.h	69;"	d
testnext	lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f
testprop	lctype.h	52;"	d
th	lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:GCUnion::lua_State
thvalue	lobject.h	167;"	d
tinsert	ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f
tmname	lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmove	ltablib.c	/^static int tmove (lua_State *L) {$/;"	f
tobefnz	lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State
tofile	liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f
tofinalize	lgc.h	92;"	d
tointeger	lvm.h	43;"	d
token	llex.h	/^  int token;$/;"	m	struct:Token
tolstream	liolib.c	138;"	d
tonumber	lvm.h	40;"	d
tonumeral	lcode.c	/^static int tonumeral(expdesc *e, TValue *v) {$/;"	f
top	lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
toproto	luac.c	137;"	d
tostore	lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl
tostring	lvm.c	441;"	d
totalbytes	lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State
touched	lfunc.h	/^      int touched;  \/* mark to avoid cycles with dead threads *\/$/;"	m	struct:UpVal::__anon1::__anon2
traverseCclosure	lgc.c	/^static lu_mem traverseCclosure (global_State *g, CClosure *cl) {$/;"	f
traverseLclosure	lgc.c	/^static lu_mem traverseLclosure (global_State *g, LClosure *cl) {$/;"	f
traverseephemeron	lgc.c	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f
traverseproto	lgc.c	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f
traversestrongtable	lgc.c	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f
traversetable	lgc.c	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f
traversethread	lgc.c	/^static lu_mem traversethread (global_State *g, lua_State *th) {$/;"	f
traverseweakvalue	lgc.c	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f
treatstackoption	ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f
tremove	ltablib.c	/^static int tremove (lua_State *L) {$/;"	f
trim	lbitlib.c	37;"	d
trydecpoint	llex.c	/^static void trydecpoint (LexState *ls, TValue *o) {$/;"	f
tryfuncTM	ldo.c	/^static void tryfuncTM (lua_State *L, StkId func) {$/;"	f
ts	llex.h	/^  TString *ts;$/;"	m	union:__anon18
ts	lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:GCUnion::TString
tsslen	lobject.h	340;"	d
tsv	lobject.h	/^  TString tsv;$/;"	m	union:UTString
tsvalue	lobject.h	159;"	d
ttisCclosure	lobject.h	144;"	d
ttisLclosure	lobject.h	145;"	d
ttisboolean	lobject.h	136;"	d
ttisclosure	lobject.h	143;"	d
ttisdeadkey	lobject.h	149;"	d
ttisfloat	lobject.h	133;"	d
ttisfulluserdata	lobject.h	147;"	d
ttisfunction	lobject.h	142;"	d
ttisinteger	lobject.h	134;"	d
ttislcf	lobject.h	146;"	d
ttislightuserdata	lobject.h	137;"	d
ttislngstring	lobject.h	140;"	d
ttisnil	lobject.h	135;"	d
ttisnumber	lobject.h	132;"	d
ttisshrstring	lobject.h	139;"	d
ttisstring	lobject.h	138;"	d
ttistable	lobject.h	141;"	d
ttisthread	lobject.h	148;"	d
ttnov	lobject.h	126;"	d
ttuv_	lobject.h	/^  lu_byte ttuv_;  \/* user value's tag *\/$/;"	m	struct:Udata
ttype	lobject.h	123;"	d
ttypename	ltm.h	53;"	d
tvk	lobject.h	/^  TValue tvk;$/;"	m	union:TKey
twoto	lobject.h	522;"	d
twups	lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
twups	lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_State
txtToken	llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f
typeerror	lauxlib.c	/^static int typeerror (lua_State *L, int arg, const char *tname) {$/;"	f
u	lfunc.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon1
u	llimits.h	/^typedef union { double u; void *s; lua_Integer i; long l; } L_Umaxalign;$/;"	m	union:__anon7
u	lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anon8
u	lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon11
u	lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Udata
u	lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anon20
u	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	struct:cD	typeref:union:cD::__anon6
u_posrelat	lutf8lib.c	/^static lua_Integer u_posrelat (lua_Integer pos, size_t len) {$/;"	f
uchar	lstrlib.c	37;"	d
ud	lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State
udata2finalize	lgc.c	/^static GCObject *udata2finalize (global_State *g) {$/;"	f
udatatypename	ltm.c	/^static const char udatatypename[] = "userdata";$/;"	v
unbound_search	ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f
undefgoto	lparser.c	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f
unmakemask	ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f
unpack	ltablib.c	/^static int unpack (lua_State *L) {$/;"	f
unpackint	lstrlib.c	/^static lua_Integer unpackint (lua_State *L, const char *str,$/;"	f
unroll	ldo.c	/^static void unroll (lua_State *L, void *ud) {$/;"	f
upisopen	lfunc.h	47;"	d
upval	lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt
upvalname	ldebug.c	/^static const char *upvalname (Proto *p, int uv) {$/;"	f
upvals	lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure
upvalue	lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure
upvalues	lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto
usage	luac.c	/^static void usage(const char* message)$/;"	f
user_	lobject.h	/^  union Value user_;  \/* user value *\/$/;"	m	struct:Udata	typeref:union:Udata::Value
utf8_decode	lutf8lib.c	/^static const char *utf8_decode (const char *o, int *val) {$/;"	f
utf8esc	llex.c	/^static void utf8esc (LexState *ls) {$/;"	f
utfchar	lutf8lib.c	/^static int utfchar (lua_State *L) {$/;"	f
utflen	lutf8lib.c	/^static int utflen (lua_State *L) {$/;"	f
uv	lobject.h	/^  Udata uv;$/;"	m	union:UUdata
uvalue	lobject.h	160;"	d
v	lfunc.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl
v	lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign
val_	lobject.h	113;"	d
validop	lcode.c	/^static int validop (int op, TValue *v1, TValue *v2) {$/;"	f
valiswhite	lgc.c	74;"	d
value	lfunc.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon1
varinfo	ldebug.c	/^static const char *varinfo (lua_State *L, const TValue *o) {$/;"	f
varname	lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
version	lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State
vkisinreg	lparser.h	39;"	d
vkisvar	lparser.h	38;"	d
vmbreak	lvm.c	741;"	d
vmcase	lvm.c	740;"	d
vmdispatch	lvm.c	739;"	d
vslen	lobject.h	343;"	d
vt	lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anon11::__anon12
weak	lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State
wgkey	ltable.h	21;"	d
what	lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug
whilestat	lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f
white2gray	lgc.c	70;"	d
writer	ldump.c	/^  lua_Writer writer;$/;"	m	struct:__anon17
writer	lstrlib.c	/^static int writer (lua_State *L, const void *b, size_t size, void *B) {$/;"	f
writer	luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f
yindex	lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f
z	ldo.c	/^  ZIO *z;$/;"	m	struct:SParser
z	llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
zgetc	lzio.h	20;"	d
